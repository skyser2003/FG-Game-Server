// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct/struct_mc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "struct/struct_mc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PKS {

namespace {

const ::google::protobuf::Descriptor* MC_JOIN_MEMBER_RESULT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MC_JOIN_MEMBER_RESULT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MC_JOIN_MEMBER_RESULT_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MC_LOGIN_RESULT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MC_LOGIN_RESULT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MC_LOGIN_RESULT_RESULT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MC_SET_FAMILY_NAME_RESULT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MC_SET_FAMILY_NAME_RESULT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MC_SET_FAMILY_NAME_RESULT_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_struct_2fstruct_5fmc_2eproto() {
  protobuf_AddDesc_struct_2fstruct_5fmc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "struct/struct_mc.proto");
  GOOGLE_CHECK(file != NULL);
  MC_JOIN_MEMBER_RESULT_descriptor_ = file->message_type(0);
  static const int MC_JOIN_MEMBER_RESULT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_JOIN_MEMBER_RESULT, result_),
  };
  MC_JOIN_MEMBER_RESULT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MC_JOIN_MEMBER_RESULT_descriptor_,
      MC_JOIN_MEMBER_RESULT::default_instance_,
      MC_JOIN_MEMBER_RESULT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_JOIN_MEMBER_RESULT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_JOIN_MEMBER_RESULT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MC_JOIN_MEMBER_RESULT));
  MC_JOIN_MEMBER_RESULT_RESULT_descriptor_ = MC_JOIN_MEMBER_RESULT_descriptor_->enum_type(0);
  MC_LOGIN_RESULT_descriptor_ = file->message_type(1);
  static const int MC_LOGIN_RESULT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_LOGIN_RESULT, result_),
  };
  MC_LOGIN_RESULT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MC_LOGIN_RESULT_descriptor_,
      MC_LOGIN_RESULT::default_instance_,
      MC_LOGIN_RESULT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_LOGIN_RESULT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_LOGIN_RESULT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MC_LOGIN_RESULT));
  MC_LOGIN_RESULT_RESULT_descriptor_ = MC_LOGIN_RESULT_descriptor_->enum_type(0);
  MC_SET_FAMILY_NAME_RESULT_descriptor_ = file->message_type(2);
  static const int MC_SET_FAMILY_NAME_RESULT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_SET_FAMILY_NAME_RESULT, result_),
  };
  MC_SET_FAMILY_NAME_RESULT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MC_SET_FAMILY_NAME_RESULT_descriptor_,
      MC_SET_FAMILY_NAME_RESULT::default_instance_,
      MC_SET_FAMILY_NAME_RESULT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_SET_FAMILY_NAME_RESULT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MC_SET_FAMILY_NAME_RESULT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MC_SET_FAMILY_NAME_RESULT));
  MC_SET_FAMILY_NAME_RESULT_RESULT_descriptor_ = MC_SET_FAMILY_NAME_RESULT_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_struct_2fstruct_5fmc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MC_JOIN_MEMBER_RESULT_descriptor_, &MC_JOIN_MEMBER_RESULT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MC_LOGIN_RESULT_descriptor_, &MC_LOGIN_RESULT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MC_SET_FAMILY_NAME_RESULT_descriptor_, &MC_SET_FAMILY_NAME_RESULT::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_struct_2fstruct_5fmc_2eproto() {
  delete MC_JOIN_MEMBER_RESULT::default_instance_;
  delete MC_JOIN_MEMBER_RESULT_reflection_;
  delete MC_LOGIN_RESULT::default_instance_;
  delete MC_LOGIN_RESULT_reflection_;
  delete MC_SET_FAMILY_NAME_RESULT::default_instance_;
  delete MC_SET_FAMILY_NAME_RESULT_reflection_;
}

void protobuf_AddDesc_struct_2fstruct_5fmc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026struct/struct_mc.proto\022\003PKS\"k\n\025MC_JOIN"
    "_MEMBER_RESULT\0221\n\006result\030\001 \002(\0162!.PKS.MC_"
    "JOIN_MEMBER_RESULT.RESULT\"\037\n\006RESULT\022\013\n\007S"
    "UCCESS\020\001\022\010\n\004FAIL\020\002\"_\n\017MC_LOGIN_RESULT\022+\n"
    "\006result\030\001 \002(\0162\033.PKS.MC_LOGIN_RESULT.RESU"
    "LT\"\037\n\006RESULT\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002\"s\n\031M"
    "C_SET_FAMILY_NAME_RESULT\0225\n\006result\030\001 \002(\016"
    "2%.PKS.MC_SET_FAMILY_NAME_RESULT.RESULT\""
    "\037\n\006RESULT\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002", 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "struct/struct_mc.proto", &protobuf_RegisterTypes);
  MC_JOIN_MEMBER_RESULT::default_instance_ = new MC_JOIN_MEMBER_RESULT();
  MC_LOGIN_RESULT::default_instance_ = new MC_LOGIN_RESULT();
  MC_SET_FAMILY_NAME_RESULT::default_instance_ = new MC_SET_FAMILY_NAME_RESULT();
  MC_JOIN_MEMBER_RESULT::default_instance_->InitAsDefaultInstance();
  MC_LOGIN_RESULT::default_instance_->InitAsDefaultInstance();
  MC_SET_FAMILY_NAME_RESULT::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_struct_2fstruct_5fmc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_struct_2fstruct_5fmc_2eproto {
  StaticDescriptorInitializer_struct_2fstruct_5fmc_2eproto() {
    protobuf_AddDesc_struct_2fstruct_5fmc_2eproto();
  }
} static_descriptor_initializer_struct_2fstruct_5fmc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MC_JOIN_MEMBER_RESULT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MC_JOIN_MEMBER_RESULT_RESULT_descriptor_;
}
bool MC_JOIN_MEMBER_RESULT_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MC_JOIN_MEMBER_RESULT_RESULT MC_JOIN_MEMBER_RESULT::SUCCESS;
const MC_JOIN_MEMBER_RESULT_RESULT MC_JOIN_MEMBER_RESULT::FAIL;
const MC_JOIN_MEMBER_RESULT_RESULT MC_JOIN_MEMBER_RESULT::RESULT_MIN;
const MC_JOIN_MEMBER_RESULT_RESULT MC_JOIN_MEMBER_RESULT::RESULT_MAX;
const int MC_JOIN_MEMBER_RESULT::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MC_JOIN_MEMBER_RESULT::kResultFieldNumber;
#endif  // !_MSC_VER

MC_JOIN_MEMBER_RESULT::MC_JOIN_MEMBER_RESULT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.MC_JOIN_MEMBER_RESULT)
}

void MC_JOIN_MEMBER_RESULT::InitAsDefaultInstance() {
}

MC_JOIN_MEMBER_RESULT::MC_JOIN_MEMBER_RESULT(const MC_JOIN_MEMBER_RESULT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.MC_JOIN_MEMBER_RESULT)
}

void MC_JOIN_MEMBER_RESULT::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MC_JOIN_MEMBER_RESULT::~MC_JOIN_MEMBER_RESULT() {
  // @@protoc_insertion_point(destructor:PKS.MC_JOIN_MEMBER_RESULT)
  SharedDtor();
}

void MC_JOIN_MEMBER_RESULT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MC_JOIN_MEMBER_RESULT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MC_JOIN_MEMBER_RESULT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MC_JOIN_MEMBER_RESULT_descriptor_;
}

const MC_JOIN_MEMBER_RESULT& MC_JOIN_MEMBER_RESULT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fmc_2eproto();
  return *default_instance_;
}

MC_JOIN_MEMBER_RESULT* MC_JOIN_MEMBER_RESULT::default_instance_ = NULL;

MC_JOIN_MEMBER_RESULT* MC_JOIN_MEMBER_RESULT::New() const {
  return new MC_JOIN_MEMBER_RESULT;
}

void MC_JOIN_MEMBER_RESULT::Clear() {
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MC_JOIN_MEMBER_RESULT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.MC_JOIN_MEMBER_RESULT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKS.MC_JOIN_MEMBER_RESULT.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKS::MC_JOIN_MEMBER_RESULT_RESULT_IsValid(value)) {
            set_result(static_cast< ::PKS::MC_JOIN_MEMBER_RESULT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.MC_JOIN_MEMBER_RESULT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.MC_JOIN_MEMBER_RESULT)
  return false;
#undef DO_
}

void MC_JOIN_MEMBER_RESULT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.MC_JOIN_MEMBER_RESULT)
  // required .PKS.MC_JOIN_MEMBER_RESULT.RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.MC_JOIN_MEMBER_RESULT)
}

::google::protobuf::uint8* MC_JOIN_MEMBER_RESULT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.MC_JOIN_MEMBER_RESULT)
  // required .PKS.MC_JOIN_MEMBER_RESULT.RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.MC_JOIN_MEMBER_RESULT)
  return target;
}

int MC_JOIN_MEMBER_RESULT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKS.MC_JOIN_MEMBER_RESULT.RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MC_JOIN_MEMBER_RESULT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MC_JOIN_MEMBER_RESULT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MC_JOIN_MEMBER_RESULT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MC_JOIN_MEMBER_RESULT::MergeFrom(const MC_JOIN_MEMBER_RESULT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MC_JOIN_MEMBER_RESULT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MC_JOIN_MEMBER_RESULT::CopyFrom(const MC_JOIN_MEMBER_RESULT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MC_JOIN_MEMBER_RESULT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MC_JOIN_MEMBER_RESULT::Swap(MC_JOIN_MEMBER_RESULT* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MC_JOIN_MEMBER_RESULT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MC_JOIN_MEMBER_RESULT_descriptor_;
  metadata.reflection = MC_JOIN_MEMBER_RESULT_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MC_LOGIN_RESULT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MC_LOGIN_RESULT_RESULT_descriptor_;
}
bool MC_LOGIN_RESULT_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MC_LOGIN_RESULT_RESULT MC_LOGIN_RESULT::SUCCESS;
const MC_LOGIN_RESULT_RESULT MC_LOGIN_RESULT::FAIL;
const MC_LOGIN_RESULT_RESULT MC_LOGIN_RESULT::RESULT_MIN;
const MC_LOGIN_RESULT_RESULT MC_LOGIN_RESULT::RESULT_MAX;
const int MC_LOGIN_RESULT::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MC_LOGIN_RESULT::kResultFieldNumber;
#endif  // !_MSC_VER

MC_LOGIN_RESULT::MC_LOGIN_RESULT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.MC_LOGIN_RESULT)
}

void MC_LOGIN_RESULT::InitAsDefaultInstance() {
}

MC_LOGIN_RESULT::MC_LOGIN_RESULT(const MC_LOGIN_RESULT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.MC_LOGIN_RESULT)
}

void MC_LOGIN_RESULT::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MC_LOGIN_RESULT::~MC_LOGIN_RESULT() {
  // @@protoc_insertion_point(destructor:PKS.MC_LOGIN_RESULT)
  SharedDtor();
}

void MC_LOGIN_RESULT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MC_LOGIN_RESULT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MC_LOGIN_RESULT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MC_LOGIN_RESULT_descriptor_;
}

const MC_LOGIN_RESULT& MC_LOGIN_RESULT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fmc_2eproto();
  return *default_instance_;
}

MC_LOGIN_RESULT* MC_LOGIN_RESULT::default_instance_ = NULL;

MC_LOGIN_RESULT* MC_LOGIN_RESULT::New() const {
  return new MC_LOGIN_RESULT;
}

void MC_LOGIN_RESULT::Clear() {
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MC_LOGIN_RESULT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.MC_LOGIN_RESULT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKS.MC_LOGIN_RESULT.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKS::MC_LOGIN_RESULT_RESULT_IsValid(value)) {
            set_result(static_cast< ::PKS::MC_LOGIN_RESULT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.MC_LOGIN_RESULT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.MC_LOGIN_RESULT)
  return false;
#undef DO_
}

void MC_LOGIN_RESULT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.MC_LOGIN_RESULT)
  // required .PKS.MC_LOGIN_RESULT.RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.MC_LOGIN_RESULT)
}

::google::protobuf::uint8* MC_LOGIN_RESULT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.MC_LOGIN_RESULT)
  // required .PKS.MC_LOGIN_RESULT.RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.MC_LOGIN_RESULT)
  return target;
}

int MC_LOGIN_RESULT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKS.MC_LOGIN_RESULT.RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MC_LOGIN_RESULT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MC_LOGIN_RESULT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MC_LOGIN_RESULT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MC_LOGIN_RESULT::MergeFrom(const MC_LOGIN_RESULT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MC_LOGIN_RESULT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MC_LOGIN_RESULT::CopyFrom(const MC_LOGIN_RESULT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MC_LOGIN_RESULT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MC_LOGIN_RESULT::Swap(MC_LOGIN_RESULT* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MC_LOGIN_RESULT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MC_LOGIN_RESULT_descriptor_;
  metadata.reflection = MC_LOGIN_RESULT_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MC_SET_FAMILY_NAME_RESULT_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MC_SET_FAMILY_NAME_RESULT_RESULT_descriptor_;
}
bool MC_SET_FAMILY_NAME_RESULT_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MC_SET_FAMILY_NAME_RESULT_RESULT MC_SET_FAMILY_NAME_RESULT::SUCCESS;
const MC_SET_FAMILY_NAME_RESULT_RESULT MC_SET_FAMILY_NAME_RESULT::FAIL;
const MC_SET_FAMILY_NAME_RESULT_RESULT MC_SET_FAMILY_NAME_RESULT::RESULT_MIN;
const MC_SET_FAMILY_NAME_RESULT_RESULT MC_SET_FAMILY_NAME_RESULT::RESULT_MAX;
const int MC_SET_FAMILY_NAME_RESULT::RESULT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MC_SET_FAMILY_NAME_RESULT::kResultFieldNumber;
#endif  // !_MSC_VER

MC_SET_FAMILY_NAME_RESULT::MC_SET_FAMILY_NAME_RESULT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.MC_SET_FAMILY_NAME_RESULT)
}

void MC_SET_FAMILY_NAME_RESULT::InitAsDefaultInstance() {
}

MC_SET_FAMILY_NAME_RESULT::MC_SET_FAMILY_NAME_RESULT(const MC_SET_FAMILY_NAME_RESULT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.MC_SET_FAMILY_NAME_RESULT)
}

void MC_SET_FAMILY_NAME_RESULT::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MC_SET_FAMILY_NAME_RESULT::~MC_SET_FAMILY_NAME_RESULT() {
  // @@protoc_insertion_point(destructor:PKS.MC_SET_FAMILY_NAME_RESULT)
  SharedDtor();
}

void MC_SET_FAMILY_NAME_RESULT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MC_SET_FAMILY_NAME_RESULT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MC_SET_FAMILY_NAME_RESULT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MC_SET_FAMILY_NAME_RESULT_descriptor_;
}

const MC_SET_FAMILY_NAME_RESULT& MC_SET_FAMILY_NAME_RESULT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fmc_2eproto();
  return *default_instance_;
}

MC_SET_FAMILY_NAME_RESULT* MC_SET_FAMILY_NAME_RESULT::default_instance_ = NULL;

MC_SET_FAMILY_NAME_RESULT* MC_SET_FAMILY_NAME_RESULT::New() const {
  return new MC_SET_FAMILY_NAME_RESULT;
}

void MC_SET_FAMILY_NAME_RESULT::Clear() {
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MC_SET_FAMILY_NAME_RESULT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.MC_SET_FAMILY_NAME_RESULT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKS.MC_SET_FAMILY_NAME_RESULT.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKS::MC_SET_FAMILY_NAME_RESULT_RESULT_IsValid(value)) {
            set_result(static_cast< ::PKS::MC_SET_FAMILY_NAME_RESULT_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.MC_SET_FAMILY_NAME_RESULT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.MC_SET_FAMILY_NAME_RESULT)
  return false;
#undef DO_
}

void MC_SET_FAMILY_NAME_RESULT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.MC_SET_FAMILY_NAME_RESULT)
  // required .PKS.MC_SET_FAMILY_NAME_RESULT.RESULT result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.MC_SET_FAMILY_NAME_RESULT)
}

::google::protobuf::uint8* MC_SET_FAMILY_NAME_RESULT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.MC_SET_FAMILY_NAME_RESULT)
  // required .PKS.MC_SET_FAMILY_NAME_RESULT.RESULT result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.MC_SET_FAMILY_NAME_RESULT)
  return target;
}

int MC_SET_FAMILY_NAME_RESULT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKS.MC_SET_FAMILY_NAME_RESULT.RESULT result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MC_SET_FAMILY_NAME_RESULT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MC_SET_FAMILY_NAME_RESULT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MC_SET_FAMILY_NAME_RESULT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MC_SET_FAMILY_NAME_RESULT::MergeFrom(const MC_SET_FAMILY_NAME_RESULT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MC_SET_FAMILY_NAME_RESULT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MC_SET_FAMILY_NAME_RESULT::CopyFrom(const MC_SET_FAMILY_NAME_RESULT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MC_SET_FAMILY_NAME_RESULT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MC_SET_FAMILY_NAME_RESULT::Swap(MC_SET_FAMILY_NAME_RESULT* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MC_SET_FAMILY_NAME_RESULT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MC_SET_FAMILY_NAME_RESULT_descriptor_;
  metadata.reflection = MC_SET_FAMILY_NAME_RESULT_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

// @@protoc_insertion_point(global_scope)
