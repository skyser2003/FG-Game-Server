// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct/struct_zc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "struct/struct_zc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PKS {

namespace {

const ::google::protobuf::Descriptor* ZC_ME_CONNECTED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_ME_CONNECTED_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_OTHER_USER_CONNECTED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_OTHER_USER_CONNECTED_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_EXIST_USER_INFORMATION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_EXIST_USER_INFORMATION_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_USER_DISCONNECTED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_USER_DISCONNECTED_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_MONSTER_APPEARED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_MONSTER_APPEARED_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_STOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_STOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_EVADE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_EVADE_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_DIED_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_DIED_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_REVIVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_REVIVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_USE_HP_POTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_USE_HP_POTION_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_MOVE_DEST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_MOVE_DEST_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_ENTER_FIELD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_ENTER_FIELD_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_ATTACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_ATTACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_GET_HIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_GET_HIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_DEAD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_DEAD_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZC_PING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZC_PING_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto() {
  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "struct/struct_zc.proto");
  GOOGLE_CHECK(file != NULL);
  ZC_ME_CONNECTED_descriptor_ = file->message_type(0);
  static const int ZC_ME_CONNECTED_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ME_CONNECTED, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ME_CONNECTED, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ME_CONNECTED, objinfo_),
  };
  ZC_ME_CONNECTED_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_ME_CONNECTED_descriptor_,
      ZC_ME_CONNECTED::default_instance_,
      ZC_ME_CONNECTED_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ME_CONNECTED, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ME_CONNECTED, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_ME_CONNECTED));
  ZC_OTHER_USER_CONNECTED_descriptor_ = file->message_type(1);
  static const int ZC_OTHER_USER_CONNECTED_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_OTHER_USER_CONNECTED, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_OTHER_USER_CONNECTED, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_OTHER_USER_CONNECTED, objinfo_),
  };
  ZC_OTHER_USER_CONNECTED_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_OTHER_USER_CONNECTED_descriptor_,
      ZC_OTHER_USER_CONNECTED::default_instance_,
      ZC_OTHER_USER_CONNECTED_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_OTHER_USER_CONNECTED, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_OTHER_USER_CONNECTED, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_OTHER_USER_CONNECTED));
  ZC_EXIST_USER_INFORMATION_descriptor_ = file->message_type(2);
  static const int ZC_EXIST_USER_INFORMATION_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EXIST_USER_INFORMATION, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EXIST_USER_INFORMATION, idlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EXIST_USER_INFORMATION, objinfolist_),
  };
  ZC_EXIST_USER_INFORMATION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_EXIST_USER_INFORMATION_descriptor_,
      ZC_EXIST_USER_INFORMATION::default_instance_,
      ZC_EXIST_USER_INFORMATION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EXIST_USER_INFORMATION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EXIST_USER_INFORMATION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_EXIST_USER_INFORMATION));
  ZC_USER_DISCONNECTED_descriptor_ = file->message_type(3);
  static const int ZC_USER_DISCONNECTED_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_USER_DISCONNECTED, userid_),
  };
  ZC_USER_DISCONNECTED_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_USER_DISCONNECTED_descriptor_,
      ZC_USER_DISCONNECTED::default_instance_,
      ZC_USER_DISCONNECTED_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_USER_DISCONNECTED, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_USER_DISCONNECTED, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_USER_DISCONNECTED));
  ZC_MONSTER_APPEARED_descriptor_ = file->message_type(4);
  static const int ZC_MONSTER_APPEARED_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MONSTER_APPEARED, objinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MONSTER_APPEARED, monsterid_),
  };
  ZC_MONSTER_APPEARED_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_MONSTER_APPEARED_descriptor_,
      ZC_MONSTER_APPEARED::default_instance_,
      ZC_MONSTER_APPEARED_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MONSTER_APPEARED, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MONSTER_APPEARED, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_MONSTER_APPEARED));
  ZC_MOVE_descriptor_ = file->message_type(5);
  static const int ZC_MOVE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE, lookangle_),
  };
  ZC_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_MOVE_descriptor_,
      ZC_MOVE::default_instance_,
      ZC_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_MOVE));
  ZC_STOP_descriptor_ = file->message_type(6);
  static const int ZC_STOP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_STOP, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_STOP, position_),
  };
  ZC_STOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_STOP_descriptor_,
      ZC_STOP::default_instance_,
      ZC_STOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_STOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_STOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_STOP));
  ZC_EVADE_descriptor_ = file->message_type(7);
  static const int ZC_EVADE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EVADE, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EVADE, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EVADE, lookangle_),
  };
  ZC_EVADE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_EVADE_descriptor_,
      ZC_EVADE::default_instance_,
      ZC_EVADE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EVADE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_EVADE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_EVADE));
  ZC_DIED_descriptor_ = file->message_type(8);
  static const int ZC_DIED_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_DIED, objid_),
  };
  ZC_DIED_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_DIED_descriptor_,
      ZC_DIED::default_instance_,
      ZC_DIED_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_DIED, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_DIED, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_DIED));
  ZC_REVIVE_descriptor_ = file->message_type(9);
  static const int ZC_REVIVE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_REVIVE, objid_),
  };
  ZC_REVIVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_REVIVE_descriptor_,
      ZC_REVIVE::default_instance_,
      ZC_REVIVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_REVIVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_REVIVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_REVIVE));
  ZC_USE_HP_POTION_descriptor_ = file->message_type(10);
  static const int ZC_USE_HP_POTION_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_USE_HP_POTION, userid_),
  };
  ZC_USE_HP_POTION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_USE_HP_POTION_descriptor_,
      ZC_USE_HP_POTION::default_instance_,
      ZC_USE_HP_POTION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_USE_HP_POTION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_USE_HP_POTION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_USE_HP_POTION));
  ZC_MOVE_DEST_descriptor_ = file->message_type(11);
  static const int ZC_MOVE_DEST_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE_DEST, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE_DEST, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE_DEST, speed_),
  };
  ZC_MOVE_DEST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_MOVE_DEST_descriptor_,
      ZC_MOVE_DEST::default_instance_,
      ZC_MOVE_DEST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE_DEST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_MOVE_DEST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_MOVE_DEST));
  ZC_ENTER_FIELD_descriptor_ = file->message_type(12);
  static const int ZC_ENTER_FIELD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ENTER_FIELD, fieldid_),
  };
  ZC_ENTER_FIELD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_ENTER_FIELD_descriptor_,
      ZC_ENTER_FIELD::default_instance_,
      ZC_ENTER_FIELD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ENTER_FIELD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ENTER_FIELD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_ENTER_FIELD));
  ZC_ATTACK_descriptor_ = file->message_type(13);
  static const int ZC_ATTACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ATTACK, objid_),
  };
  ZC_ATTACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_ATTACK_descriptor_,
      ZC_ATTACK::default_instance_,
      ZC_ATTACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ATTACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_ATTACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_ATTACK));
  ZC_GET_HIT_descriptor_ = file->message_type(14);
  static const int ZC_GET_HIT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_GET_HIT, damage_),
  };
  ZC_GET_HIT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_GET_HIT_descriptor_,
      ZC_GET_HIT::default_instance_,
      ZC_GET_HIT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_GET_HIT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_GET_HIT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_GET_HIT));
  ZC_DEAD_descriptor_ = file->message_type(15);
  static const int ZC_DEAD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_DEAD, objid_),
  };
  ZC_DEAD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_DEAD_descriptor_,
      ZC_DEAD::default_instance_,
      ZC_DEAD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_DEAD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_DEAD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_DEAD));
  ZC_PING_descriptor_ = file->message_type(16);
  static const int ZC_PING_offsets_[1] = {
  };
  ZC_PING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZC_PING_descriptor_,
      ZC_PING::default_instance_,
      ZC_PING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_PING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZC_PING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZC_PING));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_ME_CONNECTED_descriptor_, &ZC_ME_CONNECTED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_OTHER_USER_CONNECTED_descriptor_, &ZC_OTHER_USER_CONNECTED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_EXIST_USER_INFORMATION_descriptor_, &ZC_EXIST_USER_INFORMATION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_USER_DISCONNECTED_descriptor_, &ZC_USER_DISCONNECTED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_MONSTER_APPEARED_descriptor_, &ZC_MONSTER_APPEARED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_MOVE_descriptor_, &ZC_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_STOP_descriptor_, &ZC_STOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_EVADE_descriptor_, &ZC_EVADE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_DIED_descriptor_, &ZC_DIED::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_REVIVE_descriptor_, &ZC_REVIVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_USE_HP_POTION_descriptor_, &ZC_USE_HP_POTION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_MOVE_DEST_descriptor_, &ZC_MOVE_DEST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_ENTER_FIELD_descriptor_, &ZC_ENTER_FIELD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_ATTACK_descriptor_, &ZC_ATTACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_GET_HIT_descriptor_, &ZC_GET_HIT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_DEAD_descriptor_, &ZC_DEAD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZC_PING_descriptor_, &ZC_PING::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto() {
  delete ZC_ME_CONNECTED::default_instance_;
  delete ZC_ME_CONNECTED_reflection_;
  delete ZC_OTHER_USER_CONNECTED::default_instance_;
  delete ZC_OTHER_USER_CONNECTED_reflection_;
  delete ZC_EXIST_USER_INFORMATION::default_instance_;
  delete ZC_EXIST_USER_INFORMATION_reflection_;
  delete ZC_USER_DISCONNECTED::default_instance_;
  delete ZC_USER_DISCONNECTED_reflection_;
  delete ZC_MONSTER_APPEARED::default_instance_;
  delete ZC_MONSTER_APPEARED_reflection_;
  delete ZC_MOVE::default_instance_;
  delete ZC_MOVE_reflection_;
  delete ZC_STOP::default_instance_;
  delete ZC_STOP_reflection_;
  delete ZC_EVADE::default_instance_;
  delete ZC_EVADE_reflection_;
  delete ZC_DIED::default_instance_;
  delete ZC_DIED_reflection_;
  delete ZC_REVIVE::default_instance_;
  delete ZC_REVIVE_reflection_;
  delete ZC_USE_HP_POTION::default_instance_;
  delete ZC_USE_HP_POTION_reflection_;
  delete ZC_MOVE_DEST::default_instance_;
  delete ZC_MOVE_DEST_reflection_;
  delete ZC_ENTER_FIELD::default_instance_;
  delete ZC_ENTER_FIELD_reflection_;
  delete ZC_ATTACK::default_instance_;
  delete ZC_ATTACK_reflection_;
  delete ZC_GET_HIT::default_instance_;
  delete ZC_GET_HIT_reflection_;
  delete ZC_DEAD::default_instance_;
  delete ZC_DEAD_reflection_;
  delete ZC_PING::default_instance_;
  delete ZC_PING_reflection_;
}

void protobuf_AddDesc_struct_2fstruct_5fzc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PKS::protobuf_AddDesc_etc_2fstruct_5fetc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026struct/struct_zc.proto\022\003PKS\032\024etc/struc"
    "t_etc.proto\"Y\n\017ZC_ME_CONNECTED\022\016\n\006userID"
    "\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\022*\n\007objInfo\030\003 \002(\0132\031.PK"
    "S.FieldObjectBasicInfo\"a\n\027ZC_OTHER_USER_"
    "CONNECTED\022\016\n\006userID\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\022*\n"
    "\007objInfo\030\003 \002(\0132\031.PKS.FieldObjectBasicInf"
    "o\"o\n\031ZC_EXIST_USER_INFORMATION\022\022\n\nuserID"
    "List\030\001 \003(\005\022\016\n\006idList\030\002 \003(\t\022.\n\013objInfoLis"
    "t\030\003 \003(\0132\031.PKS.FieldObjectBasicInfo\"&\n\024ZC"
    "_USER_DISCONNECTED\022\016\n\006userID\030\001 \002(\005\"T\n\023ZC"
    "_MONSTER_APPEARED\022*\n\007objInfo\030\001 \002(\0132\031.PKS"
    ".FieldObjectBasicInfo\022\021\n\tmonsterID\030\002 \002(\005"
    "\"V\n\007ZC_MOVE\022\r\n\005objID\030\001 \002(\005\022\r\n\005speed\030\002 \002("
    "\002\022\032\n\007moveDir\030\003 \002(\0132\t.PKS.Vec2\022\021\n\tlookAng"
    "le\030\004 \002(\002\"5\n\007ZC_STOP\022\r\n\005objID\030\001 \002(\005\022\033\n\010po"
    "sition\030\002 \002(\0132\t.PKS.Vec2\"H\n\010ZC_EVADE\022\r\n\005o"
    "bjID\030\001 \002(\005\022\032\n\007moveDir\030\002 \002(\0132\t.PKS.Vec2\022\021"
    "\n\tlookAngle\030\003 \002(\002\"\030\n\007ZC_DIED\022\r\n\005objID\030\001 "
    "\002(\005\"\032\n\tZC_REVIVE\022\r\n\005objID\030\001 \002(\005\"\"\n\020ZC_US"
    "E_HP_POTION\022\016\n\006userID\030\001 \002(\005\"E\n\014ZC_MOVE_D"
    "EST\022\r\n\005objID\030\001 \002(\005\022\027\n\004dest\030\002 \002(\0132\t.PKS.V"
    "ec2\022\r\n\005speed\030\003 \002(\002\"!\n\016ZC_ENTER_FIELD\022\017\n\007"
    "fieldID\030\001 \002(\005\"\032\n\tZC_ATTACK\022\r\n\005objID\030\001 \002("
    "\005\"\034\n\nZC_GET_HIT\022\016\n\006damage\030\001 \002(\005\"\030\n\007ZC_DE"
    "AD\022\r\n\005objID\030\001 \002(\005\"\t\n\007ZC_PING", 988);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "struct/struct_zc.proto", &protobuf_RegisterTypes);
  ZC_ME_CONNECTED::default_instance_ = new ZC_ME_CONNECTED();
  ZC_OTHER_USER_CONNECTED::default_instance_ = new ZC_OTHER_USER_CONNECTED();
  ZC_EXIST_USER_INFORMATION::default_instance_ = new ZC_EXIST_USER_INFORMATION();
  ZC_USER_DISCONNECTED::default_instance_ = new ZC_USER_DISCONNECTED();
  ZC_MONSTER_APPEARED::default_instance_ = new ZC_MONSTER_APPEARED();
  ZC_MOVE::default_instance_ = new ZC_MOVE();
  ZC_STOP::default_instance_ = new ZC_STOP();
  ZC_EVADE::default_instance_ = new ZC_EVADE();
  ZC_DIED::default_instance_ = new ZC_DIED();
  ZC_REVIVE::default_instance_ = new ZC_REVIVE();
  ZC_USE_HP_POTION::default_instance_ = new ZC_USE_HP_POTION();
  ZC_MOVE_DEST::default_instance_ = new ZC_MOVE_DEST();
  ZC_ENTER_FIELD::default_instance_ = new ZC_ENTER_FIELD();
  ZC_ATTACK::default_instance_ = new ZC_ATTACK();
  ZC_GET_HIT::default_instance_ = new ZC_GET_HIT();
  ZC_DEAD::default_instance_ = new ZC_DEAD();
  ZC_PING::default_instance_ = new ZC_PING();
  ZC_ME_CONNECTED::default_instance_->InitAsDefaultInstance();
  ZC_OTHER_USER_CONNECTED::default_instance_->InitAsDefaultInstance();
  ZC_EXIST_USER_INFORMATION::default_instance_->InitAsDefaultInstance();
  ZC_USER_DISCONNECTED::default_instance_->InitAsDefaultInstance();
  ZC_MONSTER_APPEARED::default_instance_->InitAsDefaultInstance();
  ZC_MOVE::default_instance_->InitAsDefaultInstance();
  ZC_STOP::default_instance_->InitAsDefaultInstance();
  ZC_EVADE::default_instance_->InitAsDefaultInstance();
  ZC_DIED::default_instance_->InitAsDefaultInstance();
  ZC_REVIVE::default_instance_->InitAsDefaultInstance();
  ZC_USE_HP_POTION::default_instance_->InitAsDefaultInstance();
  ZC_MOVE_DEST::default_instance_->InitAsDefaultInstance();
  ZC_ENTER_FIELD::default_instance_->InitAsDefaultInstance();
  ZC_ATTACK::default_instance_->InitAsDefaultInstance();
  ZC_GET_HIT::default_instance_->InitAsDefaultInstance();
  ZC_DEAD::default_instance_->InitAsDefaultInstance();
  ZC_PING::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_struct_2fstruct_5fzc_2eproto {
  StaticDescriptorInitializer_struct_2fstruct_5fzc_2eproto() {
    protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  }
} static_descriptor_initializer_struct_2fstruct_5fzc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ZC_ME_CONNECTED::kUserIDFieldNumber;
const int ZC_ME_CONNECTED::kIdFieldNumber;
const int ZC_ME_CONNECTED::kObjInfoFieldNumber;
#endif  // !_MSC_VER

ZC_ME_CONNECTED::ZC_ME_CONNECTED()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_ME_CONNECTED)
}

void ZC_ME_CONNECTED::InitAsDefaultInstance() {
  objinfo_ = const_cast< ::PKS::FieldObjectBasicInfo*>(&::PKS::FieldObjectBasicInfo::default_instance());
}

ZC_ME_CONNECTED::ZC_ME_CONNECTED(const ZC_ME_CONNECTED& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_ME_CONNECTED)
}

void ZC_ME_CONNECTED::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_ME_CONNECTED::~ZC_ME_CONNECTED() {
  // @@protoc_insertion_point(destructor:PKS.ZC_ME_CONNECTED)
  SharedDtor();
}

void ZC_ME_CONNECTED::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete objinfo_;
  }
}

void ZC_ME_CONNECTED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_ME_CONNECTED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_ME_CONNECTED_descriptor_;
}

const ZC_ME_CONNECTED& ZC_ME_CONNECTED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_ME_CONNECTED* ZC_ME_CONNECTED::default_instance_ = NULL;

ZC_ME_CONNECTED* ZC_ME_CONNECTED::New() const {
  return new ZC_ME_CONNECTED;
}

void ZC_ME_CONNECTED::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    userid_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_objinfo()) {
      if (objinfo_ != NULL) objinfo_->::PKS::FieldObjectBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_ME_CONNECTED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_ME_CONNECTED)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_objInfo;
        break;
      }

      // required .PKS.FieldObjectBasicInfo objInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_objInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_ME_CONNECTED)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_ME_CONNECTED)
  return false;
#undef DO_
}

void ZC_ME_CONNECTED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_ME_CONNECTED)
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // required .PKS.FieldObjectBasicInfo objInfo = 3;
  if (has_objinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_ME_CONNECTED)
}

::google::protobuf::uint8* ZC_ME_CONNECTED::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_ME_CONNECTED)
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required .PKS.FieldObjectBasicInfo objInfo = 3;
  if (has_objinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_ME_CONNECTED)
  return target;
}

int ZC_ME_CONNECTED::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .PKS.FieldObjectBasicInfo objInfo = 3;
    if (has_objinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_ME_CONNECTED::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_ME_CONNECTED* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_ME_CONNECTED*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_ME_CONNECTED::MergeFrom(const ZC_ME_CONNECTED& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_objinfo()) {
      mutable_objinfo()->::PKS::FieldObjectBasicInfo::MergeFrom(from.objinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_ME_CONNECTED::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_ME_CONNECTED::CopyFrom(const ZC_ME_CONNECTED& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_ME_CONNECTED::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_objinfo()) {
    if (!this->objinfo().IsInitialized()) return false;
  }
  return true;
}

void ZC_ME_CONNECTED::Swap(ZC_ME_CONNECTED* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(id_, other->id_);
    std::swap(objinfo_, other->objinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_ME_CONNECTED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_ME_CONNECTED_descriptor_;
  metadata.reflection = ZC_ME_CONNECTED_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_OTHER_USER_CONNECTED::kUserIDFieldNumber;
const int ZC_OTHER_USER_CONNECTED::kIdFieldNumber;
const int ZC_OTHER_USER_CONNECTED::kObjInfoFieldNumber;
#endif  // !_MSC_VER

ZC_OTHER_USER_CONNECTED::ZC_OTHER_USER_CONNECTED()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_OTHER_USER_CONNECTED)
}

void ZC_OTHER_USER_CONNECTED::InitAsDefaultInstance() {
  objinfo_ = const_cast< ::PKS::FieldObjectBasicInfo*>(&::PKS::FieldObjectBasicInfo::default_instance());
}

ZC_OTHER_USER_CONNECTED::ZC_OTHER_USER_CONNECTED(const ZC_OTHER_USER_CONNECTED& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_OTHER_USER_CONNECTED)
}

void ZC_OTHER_USER_CONNECTED::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_OTHER_USER_CONNECTED::~ZC_OTHER_USER_CONNECTED() {
  // @@protoc_insertion_point(destructor:PKS.ZC_OTHER_USER_CONNECTED)
  SharedDtor();
}

void ZC_OTHER_USER_CONNECTED::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete objinfo_;
  }
}

void ZC_OTHER_USER_CONNECTED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_OTHER_USER_CONNECTED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_OTHER_USER_CONNECTED_descriptor_;
}

const ZC_OTHER_USER_CONNECTED& ZC_OTHER_USER_CONNECTED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_OTHER_USER_CONNECTED* ZC_OTHER_USER_CONNECTED::default_instance_ = NULL;

ZC_OTHER_USER_CONNECTED* ZC_OTHER_USER_CONNECTED::New() const {
  return new ZC_OTHER_USER_CONNECTED;
}

void ZC_OTHER_USER_CONNECTED::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    userid_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_objinfo()) {
      if (objinfo_ != NULL) objinfo_->::PKS::FieldObjectBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_OTHER_USER_CONNECTED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_OTHER_USER_CONNECTED)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_objInfo;
        break;
      }

      // required .PKS.FieldObjectBasicInfo objInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_objInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_OTHER_USER_CONNECTED)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_OTHER_USER_CONNECTED)
  return false;
#undef DO_
}

void ZC_OTHER_USER_CONNECTED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_OTHER_USER_CONNECTED)
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // required .PKS.FieldObjectBasicInfo objInfo = 3;
  if (has_objinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_OTHER_USER_CONNECTED)
}

::google::protobuf::uint8* ZC_OTHER_USER_CONNECTED::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_OTHER_USER_CONNECTED)
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required .PKS.FieldObjectBasicInfo objInfo = 3;
  if (has_objinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_OTHER_USER_CONNECTED)
  return target;
}

int ZC_OTHER_USER_CONNECTED::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .PKS.FieldObjectBasicInfo objInfo = 3;
    if (has_objinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_OTHER_USER_CONNECTED::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_OTHER_USER_CONNECTED* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_OTHER_USER_CONNECTED*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_OTHER_USER_CONNECTED::MergeFrom(const ZC_OTHER_USER_CONNECTED& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_objinfo()) {
      mutable_objinfo()->::PKS::FieldObjectBasicInfo::MergeFrom(from.objinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_OTHER_USER_CONNECTED::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_OTHER_USER_CONNECTED::CopyFrom(const ZC_OTHER_USER_CONNECTED& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_OTHER_USER_CONNECTED::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_objinfo()) {
    if (!this->objinfo().IsInitialized()) return false;
  }
  return true;
}

void ZC_OTHER_USER_CONNECTED::Swap(ZC_OTHER_USER_CONNECTED* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(id_, other->id_);
    std::swap(objinfo_, other->objinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_OTHER_USER_CONNECTED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_OTHER_USER_CONNECTED_descriptor_;
  metadata.reflection = ZC_OTHER_USER_CONNECTED_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_EXIST_USER_INFORMATION::kUserIDListFieldNumber;
const int ZC_EXIST_USER_INFORMATION::kIdListFieldNumber;
const int ZC_EXIST_USER_INFORMATION::kObjInfoListFieldNumber;
#endif  // !_MSC_VER

ZC_EXIST_USER_INFORMATION::ZC_EXIST_USER_INFORMATION()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_EXIST_USER_INFORMATION)
}

void ZC_EXIST_USER_INFORMATION::InitAsDefaultInstance() {
}

ZC_EXIST_USER_INFORMATION::ZC_EXIST_USER_INFORMATION(const ZC_EXIST_USER_INFORMATION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_EXIST_USER_INFORMATION)
}

void ZC_EXIST_USER_INFORMATION::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_EXIST_USER_INFORMATION::~ZC_EXIST_USER_INFORMATION() {
  // @@protoc_insertion_point(destructor:PKS.ZC_EXIST_USER_INFORMATION)
  SharedDtor();
}

void ZC_EXIST_USER_INFORMATION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_EXIST_USER_INFORMATION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_EXIST_USER_INFORMATION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_EXIST_USER_INFORMATION_descriptor_;
}

const ZC_EXIST_USER_INFORMATION& ZC_EXIST_USER_INFORMATION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_EXIST_USER_INFORMATION* ZC_EXIST_USER_INFORMATION::default_instance_ = NULL;

ZC_EXIST_USER_INFORMATION* ZC_EXIST_USER_INFORMATION::New() const {
  return new ZC_EXIST_USER_INFORMATION;
}

void ZC_EXIST_USER_INFORMATION::Clear() {
  useridlist_.Clear();
  idlist_.Clear();
  objinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_EXIST_USER_INFORMATION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_EXIST_USER_INFORMATION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 userIDList = 1;
      case 1: {
        if (tag == 8) {
         parse_userIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_useridlist())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_userIDList;
        if (input->ExpectTag(18)) goto parse_idList;
        break;
      }

      // repeated string idList = 2;
      case 2: {
        if (tag == 18) {
         parse_idList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_idlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idlist(this->idlist_size() - 1).data(),
            this->idlist(this->idlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idlist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_idList;
        if (input->ExpectTag(26)) goto parse_objInfoList;
        break;
      }

      // repeated .PKS.FieldObjectBasicInfo objInfoList = 3;
      case 3: {
        if (tag == 26) {
         parse_objInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_objInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_EXIST_USER_INFORMATION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_EXIST_USER_INFORMATION)
  return false;
#undef DO_
}

void ZC_EXIST_USER_INFORMATION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_EXIST_USER_INFORMATION)
  // repeated int32 userIDList = 1;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->useridlist(i), output);
  }

  // repeated string idList = 2;
  for (int i = 0; i < this->idlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->idlist(i).data(), this->idlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "idlist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idlist(i), output);
  }

  // repeated .PKS.FieldObjectBasicInfo objInfoList = 3;
  for (int i = 0; i < this->objinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_EXIST_USER_INFORMATION)
}

::google::protobuf::uint8* ZC_EXIST_USER_INFORMATION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_EXIST_USER_INFORMATION)
  // repeated int32 userIDList = 1;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->useridlist(i), target);
  }

  // repeated string idList = 2;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idlist(i).data(), this->idlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idlist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->idlist(i), target);
  }

  // repeated .PKS.FieldObjectBasicInfo objInfoList = 3;
  for (int i = 0; i < this->objinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_EXIST_USER_INFORMATION)
  return target;
}

int ZC_EXIST_USER_INFORMATION::ByteSize() const {
  int total_size = 0;

  // repeated int32 userIDList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string idList = 2;
  total_size += 1 * this->idlist_size();
  for (int i = 0; i < this->idlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->idlist(i));
  }

  // repeated .PKS.FieldObjectBasicInfo objInfoList = 3;
  total_size += 1 * this->objinfolist_size();
  for (int i = 0; i < this->objinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_EXIST_USER_INFORMATION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_EXIST_USER_INFORMATION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_EXIST_USER_INFORMATION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_EXIST_USER_INFORMATION::MergeFrom(const ZC_EXIST_USER_INFORMATION& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  idlist_.MergeFrom(from.idlist_);
  objinfolist_.MergeFrom(from.objinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_EXIST_USER_INFORMATION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_EXIST_USER_INFORMATION::CopyFrom(const ZC_EXIST_USER_INFORMATION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_EXIST_USER_INFORMATION::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objinfolist())) return false;
  return true;
}

void ZC_EXIST_USER_INFORMATION::Swap(ZC_EXIST_USER_INFORMATION* other) {
  if (other != this) {
    useridlist_.Swap(&other->useridlist_);
    idlist_.Swap(&other->idlist_);
    objinfolist_.Swap(&other->objinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_EXIST_USER_INFORMATION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_EXIST_USER_INFORMATION_descriptor_;
  metadata.reflection = ZC_EXIST_USER_INFORMATION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_USER_DISCONNECTED::kUserIDFieldNumber;
#endif  // !_MSC_VER

ZC_USER_DISCONNECTED::ZC_USER_DISCONNECTED()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_USER_DISCONNECTED)
}

void ZC_USER_DISCONNECTED::InitAsDefaultInstance() {
}

ZC_USER_DISCONNECTED::ZC_USER_DISCONNECTED(const ZC_USER_DISCONNECTED& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_USER_DISCONNECTED)
}

void ZC_USER_DISCONNECTED::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_USER_DISCONNECTED::~ZC_USER_DISCONNECTED() {
  // @@protoc_insertion_point(destructor:PKS.ZC_USER_DISCONNECTED)
  SharedDtor();
}

void ZC_USER_DISCONNECTED::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_USER_DISCONNECTED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_USER_DISCONNECTED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_USER_DISCONNECTED_descriptor_;
}

const ZC_USER_DISCONNECTED& ZC_USER_DISCONNECTED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_USER_DISCONNECTED* ZC_USER_DISCONNECTED::default_instance_ = NULL;

ZC_USER_DISCONNECTED* ZC_USER_DISCONNECTED::New() const {
  return new ZC_USER_DISCONNECTED;
}

void ZC_USER_DISCONNECTED::Clear() {
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_USER_DISCONNECTED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_USER_DISCONNECTED)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_USER_DISCONNECTED)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_USER_DISCONNECTED)
  return false;
#undef DO_
}

void ZC_USER_DISCONNECTED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_USER_DISCONNECTED)
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_USER_DISCONNECTED)
}

::google::protobuf::uint8* ZC_USER_DISCONNECTED::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_USER_DISCONNECTED)
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_USER_DISCONNECTED)
  return target;
}

int ZC_USER_DISCONNECTED::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_USER_DISCONNECTED::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_USER_DISCONNECTED* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_USER_DISCONNECTED*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_USER_DISCONNECTED::MergeFrom(const ZC_USER_DISCONNECTED& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_USER_DISCONNECTED::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_USER_DISCONNECTED::CopyFrom(const ZC_USER_DISCONNECTED& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_USER_DISCONNECTED::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_USER_DISCONNECTED::Swap(ZC_USER_DISCONNECTED* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_USER_DISCONNECTED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_USER_DISCONNECTED_descriptor_;
  metadata.reflection = ZC_USER_DISCONNECTED_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_MONSTER_APPEARED::kObjInfoFieldNumber;
const int ZC_MONSTER_APPEARED::kMonsterIDFieldNumber;
#endif  // !_MSC_VER

ZC_MONSTER_APPEARED::ZC_MONSTER_APPEARED()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_MONSTER_APPEARED)
}

void ZC_MONSTER_APPEARED::InitAsDefaultInstance() {
  objinfo_ = const_cast< ::PKS::FieldObjectBasicInfo*>(&::PKS::FieldObjectBasicInfo::default_instance());
}

ZC_MONSTER_APPEARED::ZC_MONSTER_APPEARED(const ZC_MONSTER_APPEARED& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_MONSTER_APPEARED)
}

void ZC_MONSTER_APPEARED::SharedCtor() {
  _cached_size_ = 0;
  objinfo_ = NULL;
  monsterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_MONSTER_APPEARED::~ZC_MONSTER_APPEARED() {
  // @@protoc_insertion_point(destructor:PKS.ZC_MONSTER_APPEARED)
  SharedDtor();
}

void ZC_MONSTER_APPEARED::SharedDtor() {
  if (this != default_instance_) {
    delete objinfo_;
  }
}

void ZC_MONSTER_APPEARED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_MONSTER_APPEARED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_MONSTER_APPEARED_descriptor_;
}

const ZC_MONSTER_APPEARED& ZC_MONSTER_APPEARED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_MONSTER_APPEARED* ZC_MONSTER_APPEARED::default_instance_ = NULL;

ZC_MONSTER_APPEARED* ZC_MONSTER_APPEARED::New() const {
  return new ZC_MONSTER_APPEARED;
}

void ZC_MONSTER_APPEARED::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_objinfo()) {
      if (objinfo_ != NULL) objinfo_->::PKS::FieldObjectBasicInfo::Clear();
    }
    monsterid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_MONSTER_APPEARED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_MONSTER_APPEARED)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKS.FieldObjectBasicInfo objInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monsterID;
        break;
      }

      // required int32 monsterID = 2;
      case 2: {
        if (tag == 16) {
         parse_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_MONSTER_APPEARED)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_MONSTER_APPEARED)
  return false;
#undef DO_
}

void ZC_MONSTER_APPEARED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_MONSTER_APPEARED)
  // required .PKS.FieldObjectBasicInfo objInfo = 1;
  if (has_objinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objinfo(), output);
  }

  // required int32 monsterID = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_MONSTER_APPEARED)
}

::google::protobuf::uint8* ZC_MONSTER_APPEARED::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_MONSTER_APPEARED)
  // required .PKS.FieldObjectBasicInfo objInfo = 1;
  if (has_objinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objinfo(), target);
  }

  // required int32 monsterID = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_MONSTER_APPEARED)
  return target;
}

int ZC_MONSTER_APPEARED::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKS.FieldObjectBasicInfo objInfo = 1;
    if (has_objinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objinfo());
    }

    // required int32 monsterID = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_MONSTER_APPEARED::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_MONSTER_APPEARED* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_MONSTER_APPEARED*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_MONSTER_APPEARED::MergeFrom(const ZC_MONSTER_APPEARED& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objinfo()) {
      mutable_objinfo()->::PKS::FieldObjectBasicInfo::MergeFrom(from.objinfo());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_MONSTER_APPEARED::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_MONSTER_APPEARED::CopyFrom(const ZC_MONSTER_APPEARED& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_MONSTER_APPEARED::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_objinfo()) {
    if (!this->objinfo().IsInitialized()) return false;
  }
  return true;
}

void ZC_MONSTER_APPEARED::Swap(ZC_MONSTER_APPEARED* other) {
  if (other != this) {
    std::swap(objinfo_, other->objinfo_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_MONSTER_APPEARED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_MONSTER_APPEARED_descriptor_;
  metadata.reflection = ZC_MONSTER_APPEARED_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_MOVE::kObjIDFieldNumber;
const int ZC_MOVE::kSpeedFieldNumber;
const int ZC_MOVE::kMoveDirFieldNumber;
const int ZC_MOVE::kLookAngleFieldNumber;
#endif  // !_MSC_VER

ZC_MOVE::ZC_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_MOVE)
}

void ZC_MOVE::InitAsDefaultInstance() {
  movedir_ = const_cast< ::PKS::Vec2*>(&::PKS::Vec2::default_instance());
}

ZC_MOVE::ZC_MOVE(const ZC_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_MOVE)
}

void ZC_MOVE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  speed_ = 0;
  movedir_ = NULL;
  lookangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_MOVE::~ZC_MOVE() {
  // @@protoc_insertion_point(destructor:PKS.ZC_MOVE)
  SharedDtor();
}

void ZC_MOVE::SharedDtor() {
  if (this != default_instance_) {
    delete movedir_;
  }
}

void ZC_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_MOVE_descriptor_;
}

const ZC_MOVE& ZC_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_MOVE* ZC_MOVE::default_instance_ = NULL;

ZC_MOVE* ZC_MOVE::New() const {
  return new ZC_MOVE;
}

void ZC_MOVE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZC_MOVE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(objid_, speed_);
    if (has_movedir()) {
      if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
    }
    lookangle_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_speed;
        break;
      }

      // required float speed = 2;
      case 2: {
        if (tag == 21) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_moveDir;
        break;
      }

      // required .PKS.Vec2 moveDir = 3;
      case 3: {
        if (tag == 26) {
         parse_moveDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_lookAngle;
        break;
      }

      // required float lookAngle = 4;
      case 4: {
        if (tag == 37) {
         parse_lookAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookangle_)));
          set_has_lookangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_MOVE)
  return false;
#undef DO_
}

void ZC_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_MOVE)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required float speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // required .PKS.Vec2 moveDir = 3;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->movedir(), output);
  }

  // required float lookAngle = 4;
  if (has_lookangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lookangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_MOVE)
}

::google::protobuf::uint8* ZC_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_MOVE)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required float speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // required .PKS.Vec2 moveDir = 3;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->movedir(), target);
  }

  // required float lookAngle = 4;
  if (has_lookangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lookangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_MOVE)
  return target;
}

int ZC_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required float speed = 2;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // required .PKS.Vec2 moveDir = 3;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedir());
    }

    // required float lookAngle = 4;
    if (has_lookangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_MOVE::MergeFrom(const ZC_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_movedir()) {
      mutable_movedir()->::PKS::Vec2::MergeFrom(from.movedir());
    }
    if (from.has_lookangle()) {
      set_lookangle(from.lookangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_MOVE::CopyFrom(const ZC_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_movedir()) {
    if (!this->movedir().IsInitialized()) return false;
  }
  return true;
}

void ZC_MOVE::Swap(ZC_MOVE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(speed_, other->speed_);
    std::swap(movedir_, other->movedir_);
    std::swap(lookangle_, other->lookangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_MOVE_descriptor_;
  metadata.reflection = ZC_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_STOP::kObjIDFieldNumber;
const int ZC_STOP::kPositionFieldNumber;
#endif  // !_MSC_VER

ZC_STOP::ZC_STOP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_STOP)
}

void ZC_STOP::InitAsDefaultInstance() {
  position_ = const_cast< ::PKS::Vec2*>(&::PKS::Vec2::default_instance());
}

ZC_STOP::ZC_STOP(const ZC_STOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_STOP)
}

void ZC_STOP::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_STOP::~ZC_STOP() {
  // @@protoc_insertion_point(destructor:PKS.ZC_STOP)
  SharedDtor();
}

void ZC_STOP::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void ZC_STOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_STOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_STOP_descriptor_;
}

const ZC_STOP& ZC_STOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_STOP* ZC_STOP::default_instance_ = NULL;

ZC_STOP* ZC_STOP::New() const {
  return new ZC_STOP;
}

void ZC_STOP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    objid_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::PKS::Vec2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_STOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_STOP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .PKS.Vec2 position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_STOP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_STOP)
  return false;
#undef DO_
}

void ZC_STOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_STOP)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required .PKS.Vec2 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_STOP)
}

::google::protobuf::uint8* ZC_STOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_STOP)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required .PKS.Vec2 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_STOP)
  return target;
}

int ZC_STOP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required .PKS.Vec2 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_STOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_STOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_STOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_STOP::MergeFrom(const ZC_STOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_position()) {
      mutable_position()->::PKS::Vec2::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_STOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_STOP::CopyFrom(const ZC_STOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_STOP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void ZC_STOP::Swap(ZC_STOP* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_STOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_STOP_descriptor_;
  metadata.reflection = ZC_STOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_EVADE::kObjIDFieldNumber;
const int ZC_EVADE::kMoveDirFieldNumber;
const int ZC_EVADE::kLookAngleFieldNumber;
#endif  // !_MSC_VER

ZC_EVADE::ZC_EVADE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_EVADE)
}

void ZC_EVADE::InitAsDefaultInstance() {
  movedir_ = const_cast< ::PKS::Vec2*>(&::PKS::Vec2::default_instance());
}

ZC_EVADE::ZC_EVADE(const ZC_EVADE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_EVADE)
}

void ZC_EVADE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  movedir_ = NULL;
  lookangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_EVADE::~ZC_EVADE() {
  // @@protoc_insertion_point(destructor:PKS.ZC_EVADE)
  SharedDtor();
}

void ZC_EVADE::SharedDtor() {
  if (this != default_instance_) {
    delete movedir_;
  }
}

void ZC_EVADE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_EVADE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_EVADE_descriptor_;
}

const ZC_EVADE& ZC_EVADE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_EVADE* ZC_EVADE::default_instance_ = NULL;

ZC_EVADE* ZC_EVADE::New() const {
  return new ZC_EVADE;
}

void ZC_EVADE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZC_EVADE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(objid_, lookangle_);
    if (has_movedir()) {
      if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_EVADE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_EVADE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_moveDir;
        break;
      }

      // required .PKS.Vec2 moveDir = 2;
      case 2: {
        if (tag == 18) {
         parse_moveDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_lookAngle;
        break;
      }

      // required float lookAngle = 3;
      case 3: {
        if (tag == 29) {
         parse_lookAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookangle_)));
          set_has_lookangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_EVADE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_EVADE)
  return false;
#undef DO_
}

void ZC_EVADE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_EVADE)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required .PKS.Vec2 moveDir = 2;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movedir(), output);
  }

  // required float lookAngle = 3;
  if (has_lookangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lookangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_EVADE)
}

::google::protobuf::uint8* ZC_EVADE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_EVADE)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required .PKS.Vec2 moveDir = 2;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movedir(), target);
  }

  // required float lookAngle = 3;
  if (has_lookangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lookangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_EVADE)
  return target;
}

int ZC_EVADE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required .PKS.Vec2 moveDir = 2;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedir());
    }

    // required float lookAngle = 3;
    if (has_lookangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_EVADE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_EVADE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_EVADE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_EVADE::MergeFrom(const ZC_EVADE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_movedir()) {
      mutable_movedir()->::PKS::Vec2::MergeFrom(from.movedir());
    }
    if (from.has_lookangle()) {
      set_lookangle(from.lookangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_EVADE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_EVADE::CopyFrom(const ZC_EVADE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_EVADE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_movedir()) {
    if (!this->movedir().IsInitialized()) return false;
  }
  return true;
}

void ZC_EVADE::Swap(ZC_EVADE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(movedir_, other->movedir_);
    std::swap(lookangle_, other->lookangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_EVADE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_EVADE_descriptor_;
  metadata.reflection = ZC_EVADE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_DIED::kObjIDFieldNumber;
#endif  // !_MSC_VER

ZC_DIED::ZC_DIED()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_DIED)
}

void ZC_DIED::InitAsDefaultInstance() {
}

ZC_DIED::ZC_DIED(const ZC_DIED& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_DIED)
}

void ZC_DIED::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_DIED::~ZC_DIED() {
  // @@protoc_insertion_point(destructor:PKS.ZC_DIED)
  SharedDtor();
}

void ZC_DIED::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_DIED::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_DIED::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_DIED_descriptor_;
}

const ZC_DIED& ZC_DIED::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_DIED* ZC_DIED::default_instance_ = NULL;

ZC_DIED* ZC_DIED::New() const {
  return new ZC_DIED;
}

void ZC_DIED::Clear() {
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_DIED::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_DIED)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_DIED)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_DIED)
  return false;
#undef DO_
}

void ZC_DIED::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_DIED)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_DIED)
}

::google::protobuf::uint8* ZC_DIED::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_DIED)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_DIED)
  return target;
}

int ZC_DIED::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_DIED::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_DIED* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_DIED*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_DIED::MergeFrom(const ZC_DIED& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_DIED::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_DIED::CopyFrom(const ZC_DIED& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_DIED::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_DIED::Swap(ZC_DIED* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_DIED::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_DIED_descriptor_;
  metadata.reflection = ZC_DIED_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_REVIVE::kObjIDFieldNumber;
#endif  // !_MSC_VER

ZC_REVIVE::ZC_REVIVE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_REVIVE)
}

void ZC_REVIVE::InitAsDefaultInstance() {
}

ZC_REVIVE::ZC_REVIVE(const ZC_REVIVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_REVIVE)
}

void ZC_REVIVE::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_REVIVE::~ZC_REVIVE() {
  // @@protoc_insertion_point(destructor:PKS.ZC_REVIVE)
  SharedDtor();
}

void ZC_REVIVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_REVIVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_REVIVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_REVIVE_descriptor_;
}

const ZC_REVIVE& ZC_REVIVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_REVIVE* ZC_REVIVE::default_instance_ = NULL;

ZC_REVIVE* ZC_REVIVE::New() const {
  return new ZC_REVIVE;
}

void ZC_REVIVE::Clear() {
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_REVIVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_REVIVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_REVIVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_REVIVE)
  return false;
#undef DO_
}

void ZC_REVIVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_REVIVE)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_REVIVE)
}

::google::protobuf::uint8* ZC_REVIVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_REVIVE)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_REVIVE)
  return target;
}

int ZC_REVIVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_REVIVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_REVIVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_REVIVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_REVIVE::MergeFrom(const ZC_REVIVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_REVIVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_REVIVE::CopyFrom(const ZC_REVIVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_REVIVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_REVIVE::Swap(ZC_REVIVE* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_REVIVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_REVIVE_descriptor_;
  metadata.reflection = ZC_REVIVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_USE_HP_POTION::kUserIDFieldNumber;
#endif  // !_MSC_VER

ZC_USE_HP_POTION::ZC_USE_HP_POTION()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_USE_HP_POTION)
}

void ZC_USE_HP_POTION::InitAsDefaultInstance() {
}

ZC_USE_HP_POTION::ZC_USE_HP_POTION(const ZC_USE_HP_POTION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_USE_HP_POTION)
}

void ZC_USE_HP_POTION::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_USE_HP_POTION::~ZC_USE_HP_POTION() {
  // @@protoc_insertion_point(destructor:PKS.ZC_USE_HP_POTION)
  SharedDtor();
}

void ZC_USE_HP_POTION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_USE_HP_POTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_USE_HP_POTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_USE_HP_POTION_descriptor_;
}

const ZC_USE_HP_POTION& ZC_USE_HP_POTION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_USE_HP_POTION* ZC_USE_HP_POTION::default_instance_ = NULL;

ZC_USE_HP_POTION* ZC_USE_HP_POTION::New() const {
  return new ZC_USE_HP_POTION;
}

void ZC_USE_HP_POTION::Clear() {
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_USE_HP_POTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_USE_HP_POTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_USE_HP_POTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_USE_HP_POTION)
  return false;
#undef DO_
}

void ZC_USE_HP_POTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_USE_HP_POTION)
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_USE_HP_POTION)
}

::google::protobuf::uint8* ZC_USE_HP_POTION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_USE_HP_POTION)
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_USE_HP_POTION)
  return target;
}

int ZC_USE_HP_POTION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_USE_HP_POTION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_USE_HP_POTION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_USE_HP_POTION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_USE_HP_POTION::MergeFrom(const ZC_USE_HP_POTION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_USE_HP_POTION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_USE_HP_POTION::CopyFrom(const ZC_USE_HP_POTION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_USE_HP_POTION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_USE_HP_POTION::Swap(ZC_USE_HP_POTION* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_USE_HP_POTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_USE_HP_POTION_descriptor_;
  metadata.reflection = ZC_USE_HP_POTION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_MOVE_DEST::kObjIDFieldNumber;
const int ZC_MOVE_DEST::kDestFieldNumber;
const int ZC_MOVE_DEST::kSpeedFieldNumber;
#endif  // !_MSC_VER

ZC_MOVE_DEST::ZC_MOVE_DEST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_MOVE_DEST)
}

void ZC_MOVE_DEST::InitAsDefaultInstance() {
  dest_ = const_cast< ::PKS::Vec2*>(&::PKS::Vec2::default_instance());
}

ZC_MOVE_DEST::ZC_MOVE_DEST(const ZC_MOVE_DEST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_MOVE_DEST)
}

void ZC_MOVE_DEST::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  dest_ = NULL;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_MOVE_DEST::~ZC_MOVE_DEST() {
  // @@protoc_insertion_point(destructor:PKS.ZC_MOVE_DEST)
  SharedDtor();
}

void ZC_MOVE_DEST::SharedDtor() {
  if (this != default_instance_) {
    delete dest_;
  }
}

void ZC_MOVE_DEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_MOVE_DEST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_MOVE_DEST_descriptor_;
}

const ZC_MOVE_DEST& ZC_MOVE_DEST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_MOVE_DEST* ZC_MOVE_DEST::default_instance_ = NULL;

ZC_MOVE_DEST* ZC_MOVE_DEST::New() const {
  return new ZC_MOVE_DEST;
}

void ZC_MOVE_DEST::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZC_MOVE_DEST*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(objid_, speed_);
    if (has_dest()) {
      if (dest_ != NULL) dest_->::PKS::Vec2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_MOVE_DEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_MOVE_DEST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required .PKS.Vec2 dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }

      // required float speed = 3;
      case 3: {
        if (tag == 29) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_MOVE_DEST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_MOVE_DEST)
  return false;
#undef DO_
}

void ZC_MOVE_DEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_MOVE_DEST)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  // required .PKS.Vec2 dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest(), output);
  }

  // required float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_MOVE_DEST)
}

::google::protobuf::uint8* ZC_MOVE_DEST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_MOVE_DEST)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  // required .PKS.Vec2 dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest(), target);
  }

  // required float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_MOVE_DEST)
  return target;
}

int ZC_MOVE_DEST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

    // required .PKS.Vec2 dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

    // required float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_MOVE_DEST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_MOVE_DEST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_MOVE_DEST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_MOVE_DEST::MergeFrom(const ZC_MOVE_DEST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_dest()) {
      mutable_dest()->::PKS::Vec2::MergeFrom(from.dest());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_MOVE_DEST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_MOVE_DEST::CopyFrom(const ZC_MOVE_DEST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_MOVE_DEST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_dest()) {
    if (!this->dest().IsInitialized()) return false;
  }
  return true;
}

void ZC_MOVE_DEST::Swap(ZC_MOVE_DEST* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(dest_, other->dest_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_MOVE_DEST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_MOVE_DEST_descriptor_;
  metadata.reflection = ZC_MOVE_DEST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_ENTER_FIELD::kFieldIDFieldNumber;
#endif  // !_MSC_VER

ZC_ENTER_FIELD::ZC_ENTER_FIELD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_ENTER_FIELD)
}

void ZC_ENTER_FIELD::InitAsDefaultInstance() {
}

ZC_ENTER_FIELD::ZC_ENTER_FIELD(const ZC_ENTER_FIELD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_ENTER_FIELD)
}

void ZC_ENTER_FIELD::SharedCtor() {
  _cached_size_ = 0;
  fieldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_ENTER_FIELD::~ZC_ENTER_FIELD() {
  // @@protoc_insertion_point(destructor:PKS.ZC_ENTER_FIELD)
  SharedDtor();
}

void ZC_ENTER_FIELD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_ENTER_FIELD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_ENTER_FIELD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_ENTER_FIELD_descriptor_;
}

const ZC_ENTER_FIELD& ZC_ENTER_FIELD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_ENTER_FIELD* ZC_ENTER_FIELD::default_instance_ = NULL;

ZC_ENTER_FIELD* ZC_ENTER_FIELD::New() const {
  return new ZC_ENTER_FIELD;
}

void ZC_ENTER_FIELD::Clear() {
  fieldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_ENTER_FIELD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_ENTER_FIELD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fieldID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_ENTER_FIELD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_ENTER_FIELD)
  return false;
#undef DO_
}

void ZC_ENTER_FIELD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_ENTER_FIELD)
  // required int32 fieldID = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_ENTER_FIELD)
}

::google::protobuf::uint8* ZC_ENTER_FIELD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_ENTER_FIELD)
  // required int32 fieldID = 1;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_ENTER_FIELD)
  return target;
}

int ZC_ENTER_FIELD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fieldID = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_ENTER_FIELD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_ENTER_FIELD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_ENTER_FIELD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_ENTER_FIELD::MergeFrom(const ZC_ENTER_FIELD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_ENTER_FIELD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_ENTER_FIELD::CopyFrom(const ZC_ENTER_FIELD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_ENTER_FIELD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_ENTER_FIELD::Swap(ZC_ENTER_FIELD* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_ENTER_FIELD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_ENTER_FIELD_descriptor_;
  metadata.reflection = ZC_ENTER_FIELD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_ATTACK::kObjIDFieldNumber;
#endif  // !_MSC_VER

ZC_ATTACK::ZC_ATTACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_ATTACK)
}

void ZC_ATTACK::InitAsDefaultInstance() {
}

ZC_ATTACK::ZC_ATTACK(const ZC_ATTACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_ATTACK)
}

void ZC_ATTACK::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_ATTACK::~ZC_ATTACK() {
  // @@protoc_insertion_point(destructor:PKS.ZC_ATTACK)
  SharedDtor();
}

void ZC_ATTACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_ATTACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_ATTACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_ATTACK_descriptor_;
}

const ZC_ATTACK& ZC_ATTACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_ATTACK* ZC_ATTACK::default_instance_ = NULL;

ZC_ATTACK* ZC_ATTACK::New() const {
  return new ZC_ATTACK;
}

void ZC_ATTACK::Clear() {
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_ATTACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_ATTACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_ATTACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_ATTACK)
  return false;
#undef DO_
}

void ZC_ATTACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_ATTACK)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_ATTACK)
}

::google::protobuf::uint8* ZC_ATTACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_ATTACK)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_ATTACK)
  return target;
}

int ZC_ATTACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_ATTACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_ATTACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_ATTACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_ATTACK::MergeFrom(const ZC_ATTACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_ATTACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_ATTACK::CopyFrom(const ZC_ATTACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_ATTACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_ATTACK::Swap(ZC_ATTACK* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_ATTACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_ATTACK_descriptor_;
  metadata.reflection = ZC_ATTACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_GET_HIT::kDamageFieldNumber;
#endif  // !_MSC_VER

ZC_GET_HIT::ZC_GET_HIT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_GET_HIT)
}

void ZC_GET_HIT::InitAsDefaultInstance() {
}

ZC_GET_HIT::ZC_GET_HIT(const ZC_GET_HIT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_GET_HIT)
}

void ZC_GET_HIT::SharedCtor() {
  _cached_size_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_GET_HIT::~ZC_GET_HIT() {
  // @@protoc_insertion_point(destructor:PKS.ZC_GET_HIT)
  SharedDtor();
}

void ZC_GET_HIT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_GET_HIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_GET_HIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_GET_HIT_descriptor_;
}

const ZC_GET_HIT& ZC_GET_HIT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_GET_HIT* ZC_GET_HIT::default_instance_ = NULL;

ZC_GET_HIT* ZC_GET_HIT::New() const {
  return new ZC_GET_HIT;
}

void ZC_GET_HIT::Clear() {
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_GET_HIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_GET_HIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 damage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_GET_HIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_GET_HIT)
  return false;
#undef DO_
}

void ZC_GET_HIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_GET_HIT)
  // required int32 damage = 1;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_GET_HIT)
}

::google::protobuf::uint8* ZC_GET_HIT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_GET_HIT)
  // required int32 damage = 1;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_GET_HIT)
  return target;
}

int ZC_GET_HIT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_GET_HIT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_GET_HIT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_GET_HIT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_GET_HIT::MergeFrom(const ZC_GET_HIT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_GET_HIT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_GET_HIT::CopyFrom(const ZC_GET_HIT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_GET_HIT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_GET_HIT::Swap(ZC_GET_HIT* other) {
  if (other != this) {
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_GET_HIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_GET_HIT_descriptor_;
  metadata.reflection = ZC_GET_HIT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZC_DEAD::kObjIDFieldNumber;
#endif  // !_MSC_VER

ZC_DEAD::ZC_DEAD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_DEAD)
}

void ZC_DEAD::InitAsDefaultInstance() {
}

ZC_DEAD::ZC_DEAD(const ZC_DEAD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_DEAD)
}

void ZC_DEAD::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_DEAD::~ZC_DEAD() {
  // @@protoc_insertion_point(destructor:PKS.ZC_DEAD)
  SharedDtor();
}

void ZC_DEAD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_DEAD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_DEAD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_DEAD_descriptor_;
}

const ZC_DEAD& ZC_DEAD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_DEAD* ZC_DEAD::default_instance_ = NULL;

ZC_DEAD* ZC_DEAD::New() const {
  return new ZC_DEAD;
}

void ZC_DEAD::Clear() {
  objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_DEAD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_DEAD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_DEAD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_DEAD)
  return false;
#undef DO_
}

void ZC_DEAD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_DEAD)
  // required int32 objID = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_DEAD)
}

::google::protobuf::uint8* ZC_DEAD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_DEAD)
  // required int32 objID = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_DEAD)
  return target;
}

int ZC_DEAD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objID = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_DEAD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_DEAD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_DEAD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_DEAD::MergeFrom(const ZC_DEAD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_DEAD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_DEAD::CopyFrom(const ZC_DEAD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_DEAD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZC_DEAD::Swap(ZC_DEAD* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_DEAD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_DEAD_descriptor_;
  metadata.reflection = ZC_DEAD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ZC_PING::ZC_PING()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.ZC_PING)
}

void ZC_PING::InitAsDefaultInstance() {
}

ZC_PING::ZC_PING(const ZC_PING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.ZC_PING)
}

void ZC_PING::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZC_PING::~ZC_PING() {
  // @@protoc_insertion_point(destructor:PKS.ZC_PING)
  SharedDtor();
}

void ZC_PING::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZC_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZC_PING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZC_PING_descriptor_;
}

const ZC_PING& ZC_PING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  return *default_instance_;
}

ZC_PING* ZC_PING::default_instance_ = NULL;

ZC_PING* ZC_PING::New() const {
  return new ZC_PING;
}

void ZC_PING::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZC_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.ZC_PING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.ZC_PING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.ZC_PING)
  return false;
#undef DO_
}

void ZC_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.ZC_PING)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.ZC_PING)
}

::google::protobuf::uint8* ZC_PING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.ZC_PING)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.ZC_PING)
  return target;
}

int ZC_PING::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZC_PING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZC_PING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZC_PING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZC_PING::MergeFrom(const ZC_PING& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZC_PING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZC_PING::CopyFrom(const ZC_PING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZC_PING::IsInitialized() const {

  return true;
}

void ZC_PING::Swap(ZC_PING* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZC_PING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZC_PING_descriptor_;
  metadata.reflection = ZC_PING_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

// @@protoc_insertion_point(global_scope)
