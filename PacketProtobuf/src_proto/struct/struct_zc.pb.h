// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct/struct_zc.proto

#ifndef PROTOBUF_struct_2fstruct_5fzc_2eproto__INCLUDED
#define PROTOBUF_struct_2fstruct_5fzc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "etc/struct_etc.pb.h"
// @@protoc_insertion_point(includes)

namespace PKS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

class ZC_ME_CONNECTED;
class ZC_OTHER_USER_CONNECTED;
class ZC_EXIST_USER_INFORMATION;
class ZC_USER_DISCONNECTED;
class ZC_MONSTER_APPEARED;
class ZC_MOVE;
class ZC_STOP;
class ZC_EVADE;
class ZC_DIED;
class ZC_REVIVE;
class ZC_USE_HP_POTION;
class ZC_MOVE_DEST;
class ZC_ENTER_FIELD;
class ZC_ATTACK;
class ZC_GET_HIT;
class ZC_DEAD;
class ZC_PING;

// ===================================================================

class ZC_ME_CONNECTED : public ::google::protobuf::Message {
 public:
  ZC_ME_CONNECTED();
  virtual ~ZC_ME_CONNECTED();

  ZC_ME_CONNECTED(const ZC_ME_CONNECTED& from);

  inline ZC_ME_CONNECTED& operator=(const ZC_ME_CONNECTED& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_ME_CONNECTED& default_instance();

  void Swap(ZC_ME_CONNECTED* other);

  // implements Message ----------------------------------------------

  ZC_ME_CONNECTED* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_ME_CONNECTED& from);
  void MergeFrom(const ZC_ME_CONNECTED& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required .PKS.FieldObjectBasicInfo objInfo = 3;
  inline bool has_objinfo() const;
  inline void clear_objinfo();
  static const int kObjInfoFieldNumber = 3;
  inline const ::PKS::FieldObjectBasicInfo& objinfo() const;
  inline ::PKS::FieldObjectBasicInfo* mutable_objinfo();
  inline ::PKS::FieldObjectBasicInfo* release_objinfo();
  inline void set_allocated_objinfo(::PKS::FieldObjectBasicInfo* objinfo);

  // @@protoc_insertion_point(class_scope:PKS.ZC_ME_CONNECTED)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_objinfo();
  inline void clear_has_objinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::PKS::FieldObjectBasicInfo* objinfo_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_ME_CONNECTED* default_instance_;
};
// -------------------------------------------------------------------

class ZC_OTHER_USER_CONNECTED : public ::google::protobuf::Message {
 public:
  ZC_OTHER_USER_CONNECTED();
  virtual ~ZC_OTHER_USER_CONNECTED();

  ZC_OTHER_USER_CONNECTED(const ZC_OTHER_USER_CONNECTED& from);

  inline ZC_OTHER_USER_CONNECTED& operator=(const ZC_OTHER_USER_CONNECTED& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_OTHER_USER_CONNECTED& default_instance();

  void Swap(ZC_OTHER_USER_CONNECTED* other);

  // implements Message ----------------------------------------------

  ZC_OTHER_USER_CONNECTED* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_OTHER_USER_CONNECTED& from);
  void MergeFrom(const ZC_OTHER_USER_CONNECTED& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required .PKS.FieldObjectBasicInfo objInfo = 3;
  inline bool has_objinfo() const;
  inline void clear_objinfo();
  static const int kObjInfoFieldNumber = 3;
  inline const ::PKS::FieldObjectBasicInfo& objinfo() const;
  inline ::PKS::FieldObjectBasicInfo* mutable_objinfo();
  inline ::PKS::FieldObjectBasicInfo* release_objinfo();
  inline void set_allocated_objinfo(::PKS::FieldObjectBasicInfo* objinfo);

  // @@protoc_insertion_point(class_scope:PKS.ZC_OTHER_USER_CONNECTED)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_objinfo();
  inline void clear_has_objinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::PKS::FieldObjectBasicInfo* objinfo_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_OTHER_USER_CONNECTED* default_instance_;
};
// -------------------------------------------------------------------

class ZC_EXIST_USER_INFORMATION : public ::google::protobuf::Message {
 public:
  ZC_EXIST_USER_INFORMATION();
  virtual ~ZC_EXIST_USER_INFORMATION();

  ZC_EXIST_USER_INFORMATION(const ZC_EXIST_USER_INFORMATION& from);

  inline ZC_EXIST_USER_INFORMATION& operator=(const ZC_EXIST_USER_INFORMATION& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_EXIST_USER_INFORMATION& default_instance();

  void Swap(ZC_EXIST_USER_INFORMATION* other);

  // implements Message ----------------------------------------------

  ZC_EXIST_USER_INFORMATION* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_EXIST_USER_INFORMATION& from);
  void MergeFrom(const ZC_EXIST_USER_INFORMATION& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 userIDList = 1;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUserIDListFieldNumber = 1;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated string idList = 2;
  inline int idlist_size() const;
  inline void clear_idlist();
  static const int kIdListFieldNumber = 2;
  inline const ::std::string& idlist(int index) const;
  inline ::std::string* mutable_idlist(int index);
  inline void set_idlist(int index, const ::std::string& value);
  inline void set_idlist(int index, const char* value);
  inline void set_idlist(int index, const char* value, size_t size);
  inline ::std::string* add_idlist();
  inline void add_idlist(const ::std::string& value);
  inline void add_idlist(const char* value);
  inline void add_idlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& idlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_idlist();

  // repeated .PKS.FieldObjectBasicInfo objInfoList = 3;
  inline int objinfolist_size() const;
  inline void clear_objinfolist();
  static const int kObjInfoListFieldNumber = 3;
  inline const ::PKS::FieldObjectBasicInfo& objinfolist(int index) const;
  inline ::PKS::FieldObjectBasicInfo* mutable_objinfolist(int index);
  inline ::PKS::FieldObjectBasicInfo* add_objinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::PKS::FieldObjectBasicInfo >&
      objinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKS::FieldObjectBasicInfo >*
      mutable_objinfolist();

  // @@protoc_insertion_point(class_scope:PKS.ZC_EXIST_USER_INFORMATION)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> idlist_;
  ::google::protobuf::RepeatedPtrField< ::PKS::FieldObjectBasicInfo > objinfolist_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_EXIST_USER_INFORMATION* default_instance_;
};
// -------------------------------------------------------------------

class ZC_USER_DISCONNECTED : public ::google::protobuf::Message {
 public:
  ZC_USER_DISCONNECTED();
  virtual ~ZC_USER_DISCONNECTED();

  ZC_USER_DISCONNECTED(const ZC_USER_DISCONNECTED& from);

  inline ZC_USER_DISCONNECTED& operator=(const ZC_USER_DISCONNECTED& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_USER_DISCONNECTED& default_instance();

  void Swap(ZC_USER_DISCONNECTED* other);

  // implements Message ----------------------------------------------

  ZC_USER_DISCONNECTED* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_USER_DISCONNECTED& from);
  void MergeFrom(const ZC_USER_DISCONNECTED& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_USER_DISCONNECTED)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_USER_DISCONNECTED* default_instance_;
};
// -------------------------------------------------------------------

class ZC_MONSTER_APPEARED : public ::google::protobuf::Message {
 public:
  ZC_MONSTER_APPEARED();
  virtual ~ZC_MONSTER_APPEARED();

  ZC_MONSTER_APPEARED(const ZC_MONSTER_APPEARED& from);

  inline ZC_MONSTER_APPEARED& operator=(const ZC_MONSTER_APPEARED& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_MONSTER_APPEARED& default_instance();

  void Swap(ZC_MONSTER_APPEARED* other);

  // implements Message ----------------------------------------------

  ZC_MONSTER_APPEARED* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_MONSTER_APPEARED& from);
  void MergeFrom(const ZC_MONSTER_APPEARED& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PKS.FieldObjectBasicInfo objInfo = 1;
  inline bool has_objinfo() const;
  inline void clear_objinfo();
  static const int kObjInfoFieldNumber = 1;
  inline const ::PKS::FieldObjectBasicInfo& objinfo() const;
  inline ::PKS::FieldObjectBasicInfo* mutable_objinfo();
  inline ::PKS::FieldObjectBasicInfo* release_objinfo();
  inline void set_allocated_objinfo(::PKS::FieldObjectBasicInfo* objinfo);

  // required int32 monsterID = 2;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 2;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_MONSTER_APPEARED)
 private:
  inline void set_has_objinfo();
  inline void clear_has_objinfo();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::FieldObjectBasicInfo* objinfo_;
  ::google::protobuf::int32 monsterid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_MONSTER_APPEARED* default_instance_;
};
// -------------------------------------------------------------------

class ZC_MOVE : public ::google::protobuf::Message {
 public:
  ZC_MOVE();
  virtual ~ZC_MOVE();

  ZC_MOVE(const ZC_MOVE& from);

  inline ZC_MOVE& operator=(const ZC_MOVE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_MOVE& default_instance();

  void Swap(ZC_MOVE* other);

  // implements Message ----------------------------------------------

  ZC_MOVE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_MOVE& from);
  void MergeFrom(const ZC_MOVE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // required float speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline float speed() const;
  inline void set_speed(float value);

  // required .PKS.Vec2 moveDir = 3;
  inline bool has_movedir() const;
  inline void clear_movedir();
  static const int kMoveDirFieldNumber = 3;
  inline const ::PKS::Vec2& movedir() const;
  inline ::PKS::Vec2* mutable_movedir();
  inline ::PKS::Vec2* release_movedir();
  inline void set_allocated_movedir(::PKS::Vec2* movedir);

  // required float lookAngle = 4;
  inline bool has_lookangle() const;
  inline void clear_lookangle();
  static const int kLookAngleFieldNumber = 4;
  inline float lookangle() const;
  inline void set_lookangle(float value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_MOVE)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_movedir();
  inline void clear_has_movedir();
  inline void set_has_lookangle();
  inline void clear_has_lookangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  float speed_;
  ::PKS::Vec2* movedir_;
  float lookangle_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_MOVE* default_instance_;
};
// -------------------------------------------------------------------

class ZC_STOP : public ::google::protobuf::Message {
 public:
  ZC_STOP();
  virtual ~ZC_STOP();

  ZC_STOP(const ZC_STOP& from);

  inline ZC_STOP& operator=(const ZC_STOP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_STOP& default_instance();

  void Swap(ZC_STOP* other);

  // implements Message ----------------------------------------------

  ZC_STOP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_STOP& from);
  void MergeFrom(const ZC_STOP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // required .PKS.Vec2 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::PKS::Vec2& position() const;
  inline ::PKS::Vec2* mutable_position();
  inline ::PKS::Vec2* release_position();
  inline void set_allocated_position(::PKS::Vec2* position);

  // @@protoc_insertion_point(class_scope:PKS.ZC_STOP)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::Vec2* position_;
  ::google::protobuf::int32 objid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_STOP* default_instance_;
};
// -------------------------------------------------------------------

class ZC_EVADE : public ::google::protobuf::Message {
 public:
  ZC_EVADE();
  virtual ~ZC_EVADE();

  ZC_EVADE(const ZC_EVADE& from);

  inline ZC_EVADE& operator=(const ZC_EVADE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_EVADE& default_instance();

  void Swap(ZC_EVADE* other);

  // implements Message ----------------------------------------------

  ZC_EVADE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_EVADE& from);
  void MergeFrom(const ZC_EVADE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // required .PKS.Vec2 moveDir = 2;
  inline bool has_movedir() const;
  inline void clear_movedir();
  static const int kMoveDirFieldNumber = 2;
  inline const ::PKS::Vec2& movedir() const;
  inline ::PKS::Vec2* mutable_movedir();
  inline ::PKS::Vec2* release_movedir();
  inline void set_allocated_movedir(::PKS::Vec2* movedir);

  // required float lookAngle = 3;
  inline bool has_lookangle() const;
  inline void clear_lookangle();
  static const int kLookAngleFieldNumber = 3;
  inline float lookangle() const;
  inline void set_lookangle(float value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_EVADE)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_movedir();
  inline void clear_has_movedir();
  inline void set_has_lookangle();
  inline void clear_has_lookangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::Vec2* movedir_;
  ::google::protobuf::int32 objid_;
  float lookangle_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_EVADE* default_instance_;
};
// -------------------------------------------------------------------

class ZC_DIED : public ::google::protobuf::Message {
 public:
  ZC_DIED();
  virtual ~ZC_DIED();

  ZC_DIED(const ZC_DIED& from);

  inline ZC_DIED& operator=(const ZC_DIED& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_DIED& default_instance();

  void Swap(ZC_DIED* other);

  // implements Message ----------------------------------------------

  ZC_DIED* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_DIED& from);
  void MergeFrom(const ZC_DIED& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_DIED)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_DIED* default_instance_;
};
// -------------------------------------------------------------------

class ZC_REVIVE : public ::google::protobuf::Message {
 public:
  ZC_REVIVE();
  virtual ~ZC_REVIVE();

  ZC_REVIVE(const ZC_REVIVE& from);

  inline ZC_REVIVE& operator=(const ZC_REVIVE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_REVIVE& default_instance();

  void Swap(ZC_REVIVE* other);

  // implements Message ----------------------------------------------

  ZC_REVIVE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_REVIVE& from);
  void MergeFrom(const ZC_REVIVE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_REVIVE)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_REVIVE* default_instance_;
};
// -------------------------------------------------------------------

class ZC_USE_HP_POTION : public ::google::protobuf::Message {
 public:
  ZC_USE_HP_POTION();
  virtual ~ZC_USE_HP_POTION();

  ZC_USE_HP_POTION(const ZC_USE_HP_POTION& from);

  inline ZC_USE_HP_POTION& operator=(const ZC_USE_HP_POTION& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_USE_HP_POTION& default_instance();

  void Swap(ZC_USE_HP_POTION* other);

  // implements Message ----------------------------------------------

  ZC_USE_HP_POTION* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_USE_HP_POTION& from);
  void MergeFrom(const ZC_USE_HP_POTION& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_USE_HP_POTION)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_USE_HP_POTION* default_instance_;
};
// -------------------------------------------------------------------

class ZC_MOVE_DEST : public ::google::protobuf::Message {
 public:
  ZC_MOVE_DEST();
  virtual ~ZC_MOVE_DEST();

  ZC_MOVE_DEST(const ZC_MOVE_DEST& from);

  inline ZC_MOVE_DEST& operator=(const ZC_MOVE_DEST& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_MOVE_DEST& default_instance();

  void Swap(ZC_MOVE_DEST* other);

  // implements Message ----------------------------------------------

  ZC_MOVE_DEST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_MOVE_DEST& from);
  void MergeFrom(const ZC_MOVE_DEST& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // required .PKS.Vec2 dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline const ::PKS::Vec2& dest() const;
  inline ::PKS::Vec2* mutable_dest();
  inline ::PKS::Vec2* release_dest();
  inline void set_allocated_dest(::PKS::Vec2* dest);

  // required float speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline float speed() const;
  inline void set_speed(float value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_MOVE_DEST)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::Vec2* dest_;
  ::google::protobuf::int32 objid_;
  float speed_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_MOVE_DEST* default_instance_;
};
// -------------------------------------------------------------------

class ZC_ENTER_FIELD : public ::google::protobuf::Message {
 public:
  ZC_ENTER_FIELD();
  virtual ~ZC_ENTER_FIELD();

  ZC_ENTER_FIELD(const ZC_ENTER_FIELD& from);

  inline ZC_ENTER_FIELD& operator=(const ZC_ENTER_FIELD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_ENTER_FIELD& default_instance();

  void Swap(ZC_ENTER_FIELD* other);

  // implements Message ----------------------------------------------

  ZC_ENTER_FIELD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_ENTER_FIELD& from);
  void MergeFrom(const ZC_ENTER_FIELD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fieldID = 1;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIDFieldNumber = 1;
  inline ::google::protobuf::int32 fieldid() const;
  inline void set_fieldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_ENTER_FIELD)
 private:
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fieldid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_ENTER_FIELD* default_instance_;
};
// -------------------------------------------------------------------

class ZC_ATTACK : public ::google::protobuf::Message {
 public:
  ZC_ATTACK();
  virtual ~ZC_ATTACK();

  ZC_ATTACK(const ZC_ATTACK& from);

  inline ZC_ATTACK& operator=(const ZC_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_ATTACK& default_instance();

  void Swap(ZC_ATTACK* other);

  // implements Message ----------------------------------------------

  ZC_ATTACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_ATTACK& from);
  void MergeFrom(const ZC_ATTACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_ATTACK)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_ATTACK* default_instance_;
};
// -------------------------------------------------------------------

class ZC_GET_HIT : public ::google::protobuf::Message {
 public:
  ZC_GET_HIT();
  virtual ~ZC_GET_HIT();

  ZC_GET_HIT(const ZC_GET_HIT& from);

  inline ZC_GET_HIT& operator=(const ZC_GET_HIT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_GET_HIT& default_instance();

  void Swap(ZC_GET_HIT* other);

  // implements Message ----------------------------------------------

  ZC_GET_HIT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_GET_HIT& from);
  void MergeFrom(const ZC_GET_HIT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 damage = 1;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 1;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_GET_HIT)
 private:
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 damage_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_GET_HIT* default_instance_;
};
// -------------------------------------------------------------------

class ZC_DEAD : public ::google::protobuf::Message {
 public:
  ZC_DEAD();
  virtual ~ZC_DEAD();

  ZC_DEAD(const ZC_DEAD& from);

  inline ZC_DEAD& operator=(const ZC_DEAD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_DEAD& default_instance();

  void Swap(ZC_DEAD* other);

  // implements Message ----------------------------------------------

  ZC_DEAD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_DEAD& from);
  void MergeFrom(const ZC_DEAD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objID = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.ZC_DEAD)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_DEAD* default_instance_;
};
// -------------------------------------------------------------------

class ZC_PING : public ::google::protobuf::Message {
 public:
  ZC_PING();
  virtual ~ZC_PING();

  ZC_PING(const ZC_PING& from);

  inline ZC_PING& operator=(const ZC_PING& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZC_PING& default_instance();

  void Swap(ZC_PING* other);

  // implements Message ----------------------------------------------

  ZC_PING* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZC_PING& from);
  void MergeFrom(const ZC_PING& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PKS.ZC_PING)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fzc_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fzc_2eproto();

  void InitAsDefaultInstance();
  static ZC_PING* default_instance_;
};
// ===================================================================


// ===================================================================

// ZC_ME_CONNECTED

// required int32 userID = 1;
inline bool ZC_ME_CONNECTED::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_ME_CONNECTED::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_ME_CONNECTED::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_ME_CONNECTED::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ZC_ME_CONNECTED::userid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_ME_CONNECTED.userID)
  return userid_;
}
inline void ZC_ME_CONNECTED::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_ME_CONNECTED.userID)
}

// required string id = 2;
inline bool ZC_ME_CONNECTED::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_ME_CONNECTED::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_ME_CONNECTED::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_ME_CONNECTED::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ZC_ME_CONNECTED::id() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_ME_CONNECTED.id)
  return *id_;
}
inline void ZC_ME_CONNECTED::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.ZC_ME_CONNECTED.id)
}
inline void ZC_ME_CONNECTED::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.ZC_ME_CONNECTED.id)
}
inline void ZC_ME_CONNECTED::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.ZC_ME_CONNECTED.id)
}
inline ::std::string* ZC_ME_CONNECTED::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.ZC_ME_CONNECTED.id)
  return id_;
}
inline ::std::string* ZC_ME_CONNECTED::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZC_ME_CONNECTED::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_ME_CONNECTED.id)
}

// required .PKS.FieldObjectBasicInfo objInfo = 3;
inline bool ZC_ME_CONNECTED::has_objinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZC_ME_CONNECTED::set_has_objinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZC_ME_CONNECTED::clear_has_objinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZC_ME_CONNECTED::clear_objinfo() {
  if (objinfo_ != NULL) objinfo_->::PKS::FieldObjectBasicInfo::Clear();
  clear_has_objinfo();
}
inline const ::PKS::FieldObjectBasicInfo& ZC_ME_CONNECTED::objinfo() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_ME_CONNECTED.objInfo)
  return objinfo_ != NULL ? *objinfo_ : *default_instance_->objinfo_;
}
inline ::PKS::FieldObjectBasicInfo* ZC_ME_CONNECTED::mutable_objinfo() {
  set_has_objinfo();
  if (objinfo_ == NULL) objinfo_ = new ::PKS::FieldObjectBasicInfo;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_ME_CONNECTED.objInfo)
  return objinfo_;
}
inline ::PKS::FieldObjectBasicInfo* ZC_ME_CONNECTED::release_objinfo() {
  clear_has_objinfo();
  ::PKS::FieldObjectBasicInfo* temp = objinfo_;
  objinfo_ = NULL;
  return temp;
}
inline void ZC_ME_CONNECTED::set_allocated_objinfo(::PKS::FieldObjectBasicInfo* objinfo) {
  delete objinfo_;
  objinfo_ = objinfo;
  if (objinfo) {
    set_has_objinfo();
  } else {
    clear_has_objinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_ME_CONNECTED.objInfo)
}

// -------------------------------------------------------------------

// ZC_OTHER_USER_CONNECTED

// required int32 userID = 1;
inline bool ZC_OTHER_USER_CONNECTED::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_OTHER_USER_CONNECTED::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_OTHER_USER_CONNECTED::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_OTHER_USER_CONNECTED::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ZC_OTHER_USER_CONNECTED::userid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_OTHER_USER_CONNECTED.userID)
  return userid_;
}
inline void ZC_OTHER_USER_CONNECTED::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_OTHER_USER_CONNECTED.userID)
}

// required string id = 2;
inline bool ZC_OTHER_USER_CONNECTED::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_OTHER_USER_CONNECTED::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_OTHER_USER_CONNECTED::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_OTHER_USER_CONNECTED::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ZC_OTHER_USER_CONNECTED::id() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_OTHER_USER_CONNECTED.id)
  return *id_;
}
inline void ZC_OTHER_USER_CONNECTED::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.ZC_OTHER_USER_CONNECTED.id)
}
inline void ZC_OTHER_USER_CONNECTED::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.ZC_OTHER_USER_CONNECTED.id)
}
inline void ZC_OTHER_USER_CONNECTED::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.ZC_OTHER_USER_CONNECTED.id)
}
inline ::std::string* ZC_OTHER_USER_CONNECTED::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.ZC_OTHER_USER_CONNECTED.id)
  return id_;
}
inline ::std::string* ZC_OTHER_USER_CONNECTED::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZC_OTHER_USER_CONNECTED::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_OTHER_USER_CONNECTED.id)
}

// required .PKS.FieldObjectBasicInfo objInfo = 3;
inline bool ZC_OTHER_USER_CONNECTED::has_objinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZC_OTHER_USER_CONNECTED::set_has_objinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZC_OTHER_USER_CONNECTED::clear_has_objinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZC_OTHER_USER_CONNECTED::clear_objinfo() {
  if (objinfo_ != NULL) objinfo_->::PKS::FieldObjectBasicInfo::Clear();
  clear_has_objinfo();
}
inline const ::PKS::FieldObjectBasicInfo& ZC_OTHER_USER_CONNECTED::objinfo() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_OTHER_USER_CONNECTED.objInfo)
  return objinfo_ != NULL ? *objinfo_ : *default_instance_->objinfo_;
}
inline ::PKS::FieldObjectBasicInfo* ZC_OTHER_USER_CONNECTED::mutable_objinfo() {
  set_has_objinfo();
  if (objinfo_ == NULL) objinfo_ = new ::PKS::FieldObjectBasicInfo;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_OTHER_USER_CONNECTED.objInfo)
  return objinfo_;
}
inline ::PKS::FieldObjectBasicInfo* ZC_OTHER_USER_CONNECTED::release_objinfo() {
  clear_has_objinfo();
  ::PKS::FieldObjectBasicInfo* temp = objinfo_;
  objinfo_ = NULL;
  return temp;
}
inline void ZC_OTHER_USER_CONNECTED::set_allocated_objinfo(::PKS::FieldObjectBasicInfo* objinfo) {
  delete objinfo_;
  objinfo_ = objinfo;
  if (objinfo) {
    set_has_objinfo();
  } else {
    clear_has_objinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_OTHER_USER_CONNECTED.objInfo)
}

// -------------------------------------------------------------------

// ZC_EXIST_USER_INFORMATION

// repeated int32 userIDList = 1;
inline int ZC_EXIST_USER_INFORMATION::useridlist_size() const {
  return useridlist_.size();
}
inline void ZC_EXIST_USER_INFORMATION::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ZC_EXIST_USER_INFORMATION::useridlist(int index) const {
  // @@protoc_insertion_point(field_get:PKS.ZC_EXIST_USER_INFORMATION.userIDList)
  return useridlist_.Get(index);
}
inline void ZC_EXIST_USER_INFORMATION::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:PKS.ZC_EXIST_USER_INFORMATION.userIDList)
}
inline void ZC_EXIST_USER_INFORMATION::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
  // @@protoc_insertion_point(field_add:PKS.ZC_EXIST_USER_INFORMATION.userIDList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ZC_EXIST_USER_INFORMATION::useridlist() const {
  // @@protoc_insertion_point(field_list:PKS.ZC_EXIST_USER_INFORMATION.userIDList)
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ZC_EXIST_USER_INFORMATION::mutable_useridlist() {
  // @@protoc_insertion_point(field_mutable_list:PKS.ZC_EXIST_USER_INFORMATION.userIDList)
  return &useridlist_;
}

// repeated string idList = 2;
inline int ZC_EXIST_USER_INFORMATION::idlist_size() const {
  return idlist_.size();
}
inline void ZC_EXIST_USER_INFORMATION::clear_idlist() {
  idlist_.Clear();
}
inline const ::std::string& ZC_EXIST_USER_INFORMATION::idlist(int index) const {
  // @@protoc_insertion_point(field_get:PKS.ZC_EXIST_USER_INFORMATION.idList)
  return idlist_.Get(index);
}
inline ::std::string* ZC_EXIST_USER_INFORMATION::mutable_idlist(int index) {
  // @@protoc_insertion_point(field_mutable:PKS.ZC_EXIST_USER_INFORMATION.idList)
  return idlist_.Mutable(index);
}
inline void ZC_EXIST_USER_INFORMATION::set_idlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PKS.ZC_EXIST_USER_INFORMATION.idList)
  idlist_.Mutable(index)->assign(value);
}
inline void ZC_EXIST_USER_INFORMATION::set_idlist(int index, const char* value) {
  idlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.ZC_EXIST_USER_INFORMATION.idList)
}
inline void ZC_EXIST_USER_INFORMATION::set_idlist(int index, const char* value, size_t size) {
  idlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.ZC_EXIST_USER_INFORMATION.idList)
}
inline ::std::string* ZC_EXIST_USER_INFORMATION::add_idlist() {
  return idlist_.Add();
}
inline void ZC_EXIST_USER_INFORMATION::add_idlist(const ::std::string& value) {
  idlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PKS.ZC_EXIST_USER_INFORMATION.idList)
}
inline void ZC_EXIST_USER_INFORMATION::add_idlist(const char* value) {
  idlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PKS.ZC_EXIST_USER_INFORMATION.idList)
}
inline void ZC_EXIST_USER_INFORMATION::add_idlist(const char* value, size_t size) {
  idlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PKS.ZC_EXIST_USER_INFORMATION.idList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ZC_EXIST_USER_INFORMATION::idlist() const {
  // @@protoc_insertion_point(field_list:PKS.ZC_EXIST_USER_INFORMATION.idList)
  return idlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ZC_EXIST_USER_INFORMATION::mutable_idlist() {
  // @@protoc_insertion_point(field_mutable_list:PKS.ZC_EXIST_USER_INFORMATION.idList)
  return &idlist_;
}

// repeated .PKS.FieldObjectBasicInfo objInfoList = 3;
inline int ZC_EXIST_USER_INFORMATION::objinfolist_size() const {
  return objinfolist_.size();
}
inline void ZC_EXIST_USER_INFORMATION::clear_objinfolist() {
  objinfolist_.Clear();
}
inline const ::PKS::FieldObjectBasicInfo& ZC_EXIST_USER_INFORMATION::objinfolist(int index) const {
  // @@protoc_insertion_point(field_get:PKS.ZC_EXIST_USER_INFORMATION.objInfoList)
  return objinfolist_.Get(index);
}
inline ::PKS::FieldObjectBasicInfo* ZC_EXIST_USER_INFORMATION::mutable_objinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:PKS.ZC_EXIST_USER_INFORMATION.objInfoList)
  return objinfolist_.Mutable(index);
}
inline ::PKS::FieldObjectBasicInfo* ZC_EXIST_USER_INFORMATION::add_objinfolist() {
  // @@protoc_insertion_point(field_add:PKS.ZC_EXIST_USER_INFORMATION.objInfoList)
  return objinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKS::FieldObjectBasicInfo >&
ZC_EXIST_USER_INFORMATION::objinfolist() const {
  // @@protoc_insertion_point(field_list:PKS.ZC_EXIST_USER_INFORMATION.objInfoList)
  return objinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKS::FieldObjectBasicInfo >*
ZC_EXIST_USER_INFORMATION::mutable_objinfolist() {
  // @@protoc_insertion_point(field_mutable_list:PKS.ZC_EXIST_USER_INFORMATION.objInfoList)
  return &objinfolist_;
}

// -------------------------------------------------------------------

// ZC_USER_DISCONNECTED

// required int32 userID = 1;
inline bool ZC_USER_DISCONNECTED::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_USER_DISCONNECTED::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_USER_DISCONNECTED::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_USER_DISCONNECTED::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ZC_USER_DISCONNECTED::userid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_USER_DISCONNECTED.userID)
  return userid_;
}
inline void ZC_USER_DISCONNECTED::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_USER_DISCONNECTED.userID)
}

// -------------------------------------------------------------------

// ZC_MONSTER_APPEARED

// required .PKS.FieldObjectBasicInfo objInfo = 1;
inline bool ZC_MONSTER_APPEARED::has_objinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_MONSTER_APPEARED::set_has_objinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_MONSTER_APPEARED::clear_has_objinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_MONSTER_APPEARED::clear_objinfo() {
  if (objinfo_ != NULL) objinfo_->::PKS::FieldObjectBasicInfo::Clear();
  clear_has_objinfo();
}
inline const ::PKS::FieldObjectBasicInfo& ZC_MONSTER_APPEARED::objinfo() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MONSTER_APPEARED.objInfo)
  return objinfo_ != NULL ? *objinfo_ : *default_instance_->objinfo_;
}
inline ::PKS::FieldObjectBasicInfo* ZC_MONSTER_APPEARED::mutable_objinfo() {
  set_has_objinfo();
  if (objinfo_ == NULL) objinfo_ = new ::PKS::FieldObjectBasicInfo;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_MONSTER_APPEARED.objInfo)
  return objinfo_;
}
inline ::PKS::FieldObjectBasicInfo* ZC_MONSTER_APPEARED::release_objinfo() {
  clear_has_objinfo();
  ::PKS::FieldObjectBasicInfo* temp = objinfo_;
  objinfo_ = NULL;
  return temp;
}
inline void ZC_MONSTER_APPEARED::set_allocated_objinfo(::PKS::FieldObjectBasicInfo* objinfo) {
  delete objinfo_;
  objinfo_ = objinfo;
  if (objinfo) {
    set_has_objinfo();
  } else {
    clear_has_objinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_MONSTER_APPEARED.objInfo)
}

// required int32 monsterID = 2;
inline bool ZC_MONSTER_APPEARED::has_monsterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_MONSTER_APPEARED::set_has_monsterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_MONSTER_APPEARED::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_MONSTER_APPEARED::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 ZC_MONSTER_APPEARED::monsterid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MONSTER_APPEARED.monsterID)
  return monsterid_;
}
inline void ZC_MONSTER_APPEARED::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_MONSTER_APPEARED.monsterID)
}

// -------------------------------------------------------------------

// ZC_MOVE

// required int32 objID = 1;
inline bool ZC_MOVE::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_MOVE::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_MOVE::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_MOVE::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_MOVE::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE.objID)
  return objid_;
}
inline void ZC_MOVE::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_MOVE.objID)
}

// required float speed = 2;
inline bool ZC_MOVE::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_MOVE::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_MOVE::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_MOVE::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float ZC_MOVE::speed() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE.speed)
  return speed_;
}
inline void ZC_MOVE::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_MOVE.speed)
}

// required .PKS.Vec2 moveDir = 3;
inline bool ZC_MOVE::has_movedir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZC_MOVE::set_has_movedir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZC_MOVE::clear_has_movedir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZC_MOVE::clear_movedir() {
  if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
  clear_has_movedir();
}
inline const ::PKS::Vec2& ZC_MOVE::movedir() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE.moveDir)
  return movedir_ != NULL ? *movedir_ : *default_instance_->movedir_;
}
inline ::PKS::Vec2* ZC_MOVE::mutable_movedir() {
  set_has_movedir();
  if (movedir_ == NULL) movedir_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_MOVE.moveDir)
  return movedir_;
}
inline ::PKS::Vec2* ZC_MOVE::release_movedir() {
  clear_has_movedir();
  ::PKS::Vec2* temp = movedir_;
  movedir_ = NULL;
  return temp;
}
inline void ZC_MOVE::set_allocated_movedir(::PKS::Vec2* movedir) {
  delete movedir_;
  movedir_ = movedir;
  if (movedir) {
    set_has_movedir();
  } else {
    clear_has_movedir();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_MOVE.moveDir)
}

// required float lookAngle = 4;
inline bool ZC_MOVE::has_lookangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZC_MOVE::set_has_lookangle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZC_MOVE::clear_has_lookangle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZC_MOVE::clear_lookangle() {
  lookangle_ = 0;
  clear_has_lookangle();
}
inline float ZC_MOVE::lookangle() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE.lookAngle)
  return lookangle_;
}
inline void ZC_MOVE::set_lookangle(float value) {
  set_has_lookangle();
  lookangle_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_MOVE.lookAngle)
}

// -------------------------------------------------------------------

// ZC_STOP

// required int32 objID = 1;
inline bool ZC_STOP::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_STOP::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_STOP::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_STOP::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_STOP::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_STOP.objID)
  return objid_;
}
inline void ZC_STOP::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_STOP.objID)
}

// required .PKS.Vec2 position = 2;
inline bool ZC_STOP::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_STOP::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_STOP::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_STOP::clear_position() {
  if (position_ != NULL) position_->::PKS::Vec2::Clear();
  clear_has_position();
}
inline const ::PKS::Vec2& ZC_STOP::position() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_STOP.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::PKS::Vec2* ZC_STOP::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_STOP.position)
  return position_;
}
inline ::PKS::Vec2* ZC_STOP::release_position() {
  clear_has_position();
  ::PKS::Vec2* temp = position_;
  position_ = NULL;
  return temp;
}
inline void ZC_STOP::set_allocated_position(::PKS::Vec2* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_STOP.position)
}

// -------------------------------------------------------------------

// ZC_EVADE

// required int32 objID = 1;
inline bool ZC_EVADE::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_EVADE::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_EVADE::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_EVADE::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_EVADE::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_EVADE.objID)
  return objid_;
}
inline void ZC_EVADE::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_EVADE.objID)
}

// required .PKS.Vec2 moveDir = 2;
inline bool ZC_EVADE::has_movedir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_EVADE::set_has_movedir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_EVADE::clear_has_movedir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_EVADE::clear_movedir() {
  if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
  clear_has_movedir();
}
inline const ::PKS::Vec2& ZC_EVADE::movedir() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_EVADE.moveDir)
  return movedir_ != NULL ? *movedir_ : *default_instance_->movedir_;
}
inline ::PKS::Vec2* ZC_EVADE::mutable_movedir() {
  set_has_movedir();
  if (movedir_ == NULL) movedir_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_EVADE.moveDir)
  return movedir_;
}
inline ::PKS::Vec2* ZC_EVADE::release_movedir() {
  clear_has_movedir();
  ::PKS::Vec2* temp = movedir_;
  movedir_ = NULL;
  return temp;
}
inline void ZC_EVADE::set_allocated_movedir(::PKS::Vec2* movedir) {
  delete movedir_;
  movedir_ = movedir;
  if (movedir) {
    set_has_movedir();
  } else {
    clear_has_movedir();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_EVADE.moveDir)
}

// required float lookAngle = 3;
inline bool ZC_EVADE::has_lookangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZC_EVADE::set_has_lookangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZC_EVADE::clear_has_lookangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZC_EVADE::clear_lookangle() {
  lookangle_ = 0;
  clear_has_lookangle();
}
inline float ZC_EVADE::lookangle() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_EVADE.lookAngle)
  return lookangle_;
}
inline void ZC_EVADE::set_lookangle(float value) {
  set_has_lookangle();
  lookangle_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_EVADE.lookAngle)
}

// -------------------------------------------------------------------

// ZC_DIED

// required int32 objID = 1;
inline bool ZC_DIED::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_DIED::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_DIED::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_DIED::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_DIED::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_DIED.objID)
  return objid_;
}
inline void ZC_DIED::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_DIED.objID)
}

// -------------------------------------------------------------------

// ZC_REVIVE

// required int32 objID = 1;
inline bool ZC_REVIVE::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_REVIVE::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_REVIVE::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_REVIVE::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_REVIVE::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_REVIVE.objID)
  return objid_;
}
inline void ZC_REVIVE::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_REVIVE.objID)
}

// -------------------------------------------------------------------

// ZC_USE_HP_POTION

// required int32 userID = 1;
inline bool ZC_USE_HP_POTION::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_USE_HP_POTION::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_USE_HP_POTION::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_USE_HP_POTION::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ZC_USE_HP_POTION::userid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_USE_HP_POTION.userID)
  return userid_;
}
inline void ZC_USE_HP_POTION::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_USE_HP_POTION.userID)
}

// -------------------------------------------------------------------

// ZC_MOVE_DEST

// required int32 objID = 1;
inline bool ZC_MOVE_DEST::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_MOVE_DEST::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_MOVE_DEST::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_MOVE_DEST::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_MOVE_DEST::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE_DEST.objID)
  return objid_;
}
inline void ZC_MOVE_DEST::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_MOVE_DEST.objID)
}

// required .PKS.Vec2 dest = 2;
inline bool ZC_MOVE_DEST::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZC_MOVE_DEST::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZC_MOVE_DEST::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZC_MOVE_DEST::clear_dest() {
  if (dest_ != NULL) dest_->::PKS::Vec2::Clear();
  clear_has_dest();
}
inline const ::PKS::Vec2& ZC_MOVE_DEST::dest() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE_DEST.dest)
  return dest_ != NULL ? *dest_ : *default_instance_->dest_;
}
inline ::PKS::Vec2* ZC_MOVE_DEST::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) dest_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.ZC_MOVE_DEST.dest)
  return dest_;
}
inline ::PKS::Vec2* ZC_MOVE_DEST::release_dest() {
  clear_has_dest();
  ::PKS::Vec2* temp = dest_;
  dest_ = NULL;
  return temp;
}
inline void ZC_MOVE_DEST::set_allocated_dest(::PKS::Vec2* dest) {
  delete dest_;
  dest_ = dest;
  if (dest) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.ZC_MOVE_DEST.dest)
}

// required float speed = 3;
inline bool ZC_MOVE_DEST::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZC_MOVE_DEST::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZC_MOVE_DEST::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZC_MOVE_DEST::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float ZC_MOVE_DEST::speed() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_MOVE_DEST.speed)
  return speed_;
}
inline void ZC_MOVE_DEST::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_MOVE_DEST.speed)
}

// -------------------------------------------------------------------

// ZC_ENTER_FIELD

// required int32 fieldID = 1;
inline bool ZC_ENTER_FIELD::has_fieldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_ENTER_FIELD::set_has_fieldid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_ENTER_FIELD::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_ENTER_FIELD::clear_fieldid() {
  fieldid_ = 0;
  clear_has_fieldid();
}
inline ::google::protobuf::int32 ZC_ENTER_FIELD::fieldid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_ENTER_FIELD.fieldID)
  return fieldid_;
}
inline void ZC_ENTER_FIELD::set_fieldid(::google::protobuf::int32 value) {
  set_has_fieldid();
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_ENTER_FIELD.fieldID)
}

// -------------------------------------------------------------------

// ZC_ATTACK

// required int32 objID = 1;
inline bool ZC_ATTACK::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_ATTACK::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_ATTACK::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_ATTACK::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_ATTACK::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_ATTACK.objID)
  return objid_;
}
inline void ZC_ATTACK::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_ATTACK.objID)
}

// -------------------------------------------------------------------

// ZC_GET_HIT

// required int32 damage = 1;
inline bool ZC_GET_HIT::has_damage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_GET_HIT::set_has_damage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_GET_HIT::clear_has_damage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_GET_HIT::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 ZC_GET_HIT::damage() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_GET_HIT.damage)
  return damage_;
}
inline void ZC_GET_HIT::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_GET_HIT.damage)
}

// -------------------------------------------------------------------

// ZC_DEAD

// required int32 objID = 1;
inline bool ZC_DEAD::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZC_DEAD::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZC_DEAD::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZC_DEAD::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 ZC_DEAD::objid() const {
  // @@protoc_insertion_point(field_get:PKS.ZC_DEAD.objID)
  return objid_;
}
inline void ZC_DEAD::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:PKS.ZC_DEAD.objID)
}

// -------------------------------------------------------------------

// ZC_PING


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_struct_2fstruct_5fzc_2eproto__INCLUDED
