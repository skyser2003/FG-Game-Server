// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct/struct_cz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "struct/struct_cz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PKS {

namespace {

const ::google::protobuf::Descriptor* CZ_MOVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_MOVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_STOP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_STOP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_EVADE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_EVADE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_ENTER_GAME_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_ENTER_GAME_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_ATTACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_ATTACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_ATTACK_HIT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_ATTACK_HIT_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_REVIVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_REVIVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_USE_HP_POTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_USE_HP_POTION_reflection_ = NULL;
const ::google::protobuf::Descriptor* CZ_PING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CZ_PING_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto() {
  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "struct/struct_cz.proto");
  GOOGLE_CHECK(file != NULL);
  CZ_MOVE_descriptor_ = file->message_type(0);
  static const int CZ_MOVE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_MOVE, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_MOVE, lookangle_),
  };
  CZ_MOVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_MOVE_descriptor_,
      CZ_MOVE::default_instance_,
      CZ_MOVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_MOVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_MOVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_MOVE));
  CZ_STOP_descriptor_ = file->message_type(1);
  static const int CZ_STOP_offsets_[1] = {
  };
  CZ_STOP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_STOP_descriptor_,
      CZ_STOP::default_instance_,
      CZ_STOP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_STOP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_STOP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_STOP));
  CZ_EVADE_descriptor_ = file->message_type(2);
  static const int CZ_EVADE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_EVADE, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_EVADE, lookangle_),
  };
  CZ_EVADE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_EVADE_descriptor_,
      CZ_EVADE::default_instance_,
      CZ_EVADE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_EVADE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_EVADE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_EVADE));
  CZ_ENTER_GAME_descriptor_ = file->message_type(3);
  static const int CZ_ENTER_GAME_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ENTER_GAME, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ENTER_GAME, pw_),
  };
  CZ_ENTER_GAME_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_ENTER_GAME_descriptor_,
      CZ_ENTER_GAME::default_instance_,
      CZ_ENTER_GAME_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ENTER_GAME, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ENTER_GAME, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_ENTER_GAME));
  CZ_ATTACK_descriptor_ = file->message_type(4);
  static const int CZ_ATTACK_offsets_[1] = {
  };
  CZ_ATTACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_ATTACK_descriptor_,
      CZ_ATTACK::default_instance_,
      CZ_ATTACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ATTACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ATTACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_ATTACK));
  CZ_ATTACK_HIT_descriptor_ = file->message_type(5);
  static const int CZ_ATTACK_HIT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ATTACK_HIT, hitobjid_),
  };
  CZ_ATTACK_HIT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_ATTACK_HIT_descriptor_,
      CZ_ATTACK_HIT::default_instance_,
      CZ_ATTACK_HIT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ATTACK_HIT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_ATTACK_HIT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_ATTACK_HIT));
  CZ_REVIVE_descriptor_ = file->message_type(6);
  static const int CZ_REVIVE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_REVIVE, userid_),
  };
  CZ_REVIVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_REVIVE_descriptor_,
      CZ_REVIVE::default_instance_,
      CZ_REVIVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_REVIVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_REVIVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_REVIVE));
  CZ_USE_HP_POTION_descriptor_ = file->message_type(7);
  static const int CZ_USE_HP_POTION_offsets_[1] = {
  };
  CZ_USE_HP_POTION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_USE_HP_POTION_descriptor_,
      CZ_USE_HP_POTION::default_instance_,
      CZ_USE_HP_POTION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_USE_HP_POTION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_USE_HP_POTION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_USE_HP_POTION));
  CZ_PING_descriptor_ = file->message_type(8);
  static const int CZ_PING_offsets_[1] = {
  };
  CZ_PING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CZ_PING_descriptor_,
      CZ_PING::default_instance_,
      CZ_PING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_PING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CZ_PING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CZ_PING));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_MOVE_descriptor_, &CZ_MOVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_STOP_descriptor_, &CZ_STOP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_EVADE_descriptor_, &CZ_EVADE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_ENTER_GAME_descriptor_, &CZ_ENTER_GAME::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_ATTACK_descriptor_, &CZ_ATTACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_ATTACK_HIT_descriptor_, &CZ_ATTACK_HIT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_REVIVE_descriptor_, &CZ_REVIVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_USE_HP_POTION_descriptor_, &CZ_USE_HP_POTION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CZ_PING_descriptor_, &CZ_PING::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto() {
  delete CZ_MOVE::default_instance_;
  delete CZ_MOVE_reflection_;
  delete CZ_STOP::default_instance_;
  delete CZ_STOP_reflection_;
  delete CZ_EVADE::default_instance_;
  delete CZ_EVADE_reflection_;
  delete CZ_ENTER_GAME::default_instance_;
  delete CZ_ENTER_GAME_reflection_;
  delete CZ_ATTACK::default_instance_;
  delete CZ_ATTACK_reflection_;
  delete CZ_ATTACK_HIT::default_instance_;
  delete CZ_ATTACK_HIT_reflection_;
  delete CZ_REVIVE::default_instance_;
  delete CZ_REVIVE_reflection_;
  delete CZ_USE_HP_POTION::default_instance_;
  delete CZ_USE_HP_POTION_reflection_;
  delete CZ_PING::default_instance_;
  delete CZ_PING_reflection_;
}

void protobuf_AddDesc_struct_2fstruct_5fcz_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PKS::protobuf_AddDesc_etc_2fstruct_5fetc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026struct/struct_cz.proto\022\003PKS\032\024etc/struc"
    "t_etc.proto\"8\n\007CZ_MOVE\022\032\n\007moveDir\030\001 \002(\0132"
    "\t.PKS.Vec2\022\021\n\tlookAngle\030\002 \002(\002\"\t\n\007CZ_STOP"
    "\"9\n\010CZ_EVADE\022\032\n\007moveDir\030\001 \002(\0132\t.PKS.Vec2"
    "\022\021\n\tlookAngle\030\002 \002(\002\"\'\n\rCZ_ENTER_GAME\022\n\n\002"
    "id\030\001 \002(\t\022\n\n\002pw\030\002 \002(\t\"\013\n\tCZ_ATTACK\"!\n\rCZ_"
    "ATTACK_HIT\022\020\n\010hitObjID\030\001 \002(\005\"\033\n\tCZ_REVIV"
    "E\022\016\n\006userID\030\001 \002(\005\"\022\n\020CZ_USE_HP_POTION\"\t\n"
    "\007CZ_PING", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "struct/struct_cz.proto", &protobuf_RegisterTypes);
  CZ_MOVE::default_instance_ = new CZ_MOVE();
  CZ_STOP::default_instance_ = new CZ_STOP();
  CZ_EVADE::default_instance_ = new CZ_EVADE();
  CZ_ENTER_GAME::default_instance_ = new CZ_ENTER_GAME();
  CZ_ATTACK::default_instance_ = new CZ_ATTACK();
  CZ_ATTACK_HIT::default_instance_ = new CZ_ATTACK_HIT();
  CZ_REVIVE::default_instance_ = new CZ_REVIVE();
  CZ_USE_HP_POTION::default_instance_ = new CZ_USE_HP_POTION();
  CZ_PING::default_instance_ = new CZ_PING();
  CZ_MOVE::default_instance_->InitAsDefaultInstance();
  CZ_STOP::default_instance_->InitAsDefaultInstance();
  CZ_EVADE::default_instance_->InitAsDefaultInstance();
  CZ_ENTER_GAME::default_instance_->InitAsDefaultInstance();
  CZ_ATTACK::default_instance_->InitAsDefaultInstance();
  CZ_ATTACK_HIT::default_instance_->InitAsDefaultInstance();
  CZ_REVIVE::default_instance_->InitAsDefaultInstance();
  CZ_USE_HP_POTION::default_instance_->InitAsDefaultInstance();
  CZ_PING::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_struct_2fstruct_5fcz_2eproto {
  StaticDescriptorInitializer_struct_2fstruct_5fcz_2eproto() {
    protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  }
} static_descriptor_initializer_struct_2fstruct_5fcz_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CZ_MOVE::kMoveDirFieldNumber;
const int CZ_MOVE::kLookAngleFieldNumber;
#endif  // !_MSC_VER

CZ_MOVE::CZ_MOVE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_MOVE)
}

void CZ_MOVE::InitAsDefaultInstance() {
  movedir_ = const_cast< ::PKS::Vec2*>(&::PKS::Vec2::default_instance());
}

CZ_MOVE::CZ_MOVE(const CZ_MOVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_MOVE)
}

void CZ_MOVE::SharedCtor() {
  _cached_size_ = 0;
  movedir_ = NULL;
  lookangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_MOVE::~CZ_MOVE() {
  // @@protoc_insertion_point(destructor:PKS.CZ_MOVE)
  SharedDtor();
}

void CZ_MOVE::SharedDtor() {
  if (this != default_instance_) {
    delete movedir_;
  }
}

void CZ_MOVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_MOVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_MOVE_descriptor_;
}

const CZ_MOVE& CZ_MOVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_MOVE* CZ_MOVE::default_instance_ = NULL;

CZ_MOVE* CZ_MOVE::New() const {
  return new CZ_MOVE;
}

void CZ_MOVE::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_movedir()) {
      if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
    }
    lookangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_MOVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_MOVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKS.Vec2 moveDir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lookAngle;
        break;
      }

      // required float lookAngle = 2;
      case 2: {
        if (tag == 21) {
         parse_lookAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookangle_)));
          set_has_lookangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_MOVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_MOVE)
  return false;
#undef DO_
}

void CZ_MOVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_MOVE)
  // required .PKS.Vec2 moveDir = 1;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->movedir(), output);
  }

  // required float lookAngle = 2;
  if (has_lookangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lookangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_MOVE)
}

::google::protobuf::uint8* CZ_MOVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_MOVE)
  // required .PKS.Vec2 moveDir = 1;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->movedir(), target);
  }

  // required float lookAngle = 2;
  if (has_lookangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lookangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_MOVE)
  return target;
}

int CZ_MOVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKS.Vec2 moveDir = 1;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedir());
    }

    // required float lookAngle = 2;
    if (has_lookangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_MOVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_MOVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_MOVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_MOVE::MergeFrom(const CZ_MOVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movedir()) {
      mutable_movedir()->::PKS::Vec2::MergeFrom(from.movedir());
    }
    if (from.has_lookangle()) {
      set_lookangle(from.lookangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_MOVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_MOVE::CopyFrom(const CZ_MOVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_MOVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_movedir()) {
    if (!this->movedir().IsInitialized()) return false;
  }
  return true;
}

void CZ_MOVE::Swap(CZ_MOVE* other) {
  if (other != this) {
    std::swap(movedir_, other->movedir_);
    std::swap(lookangle_, other->lookangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_MOVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_MOVE_descriptor_;
  metadata.reflection = CZ_MOVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CZ_STOP::CZ_STOP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_STOP)
}

void CZ_STOP::InitAsDefaultInstance() {
}

CZ_STOP::CZ_STOP(const CZ_STOP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_STOP)
}

void CZ_STOP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_STOP::~CZ_STOP() {
  // @@protoc_insertion_point(destructor:PKS.CZ_STOP)
  SharedDtor();
}

void CZ_STOP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CZ_STOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_STOP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_STOP_descriptor_;
}

const CZ_STOP& CZ_STOP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_STOP* CZ_STOP::default_instance_ = NULL;

CZ_STOP* CZ_STOP::New() const {
  return new CZ_STOP;
}

void CZ_STOP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_STOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_STOP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_STOP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_STOP)
  return false;
#undef DO_
}

void CZ_STOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_STOP)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_STOP)
}

::google::protobuf::uint8* CZ_STOP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_STOP)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_STOP)
  return target;
}

int CZ_STOP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_STOP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_STOP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_STOP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_STOP::MergeFrom(const CZ_STOP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_STOP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_STOP::CopyFrom(const CZ_STOP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_STOP::IsInitialized() const {

  return true;
}

void CZ_STOP::Swap(CZ_STOP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_STOP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_STOP_descriptor_;
  metadata.reflection = CZ_STOP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CZ_EVADE::kMoveDirFieldNumber;
const int CZ_EVADE::kLookAngleFieldNumber;
#endif  // !_MSC_VER

CZ_EVADE::CZ_EVADE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_EVADE)
}

void CZ_EVADE::InitAsDefaultInstance() {
  movedir_ = const_cast< ::PKS::Vec2*>(&::PKS::Vec2::default_instance());
}

CZ_EVADE::CZ_EVADE(const CZ_EVADE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_EVADE)
}

void CZ_EVADE::SharedCtor() {
  _cached_size_ = 0;
  movedir_ = NULL;
  lookangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_EVADE::~CZ_EVADE() {
  // @@protoc_insertion_point(destructor:PKS.CZ_EVADE)
  SharedDtor();
}

void CZ_EVADE::SharedDtor() {
  if (this != default_instance_) {
    delete movedir_;
  }
}

void CZ_EVADE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_EVADE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_EVADE_descriptor_;
}

const CZ_EVADE& CZ_EVADE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_EVADE* CZ_EVADE::default_instance_ = NULL;

CZ_EVADE* CZ_EVADE::New() const {
  return new CZ_EVADE;
}

void CZ_EVADE::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_movedir()) {
      if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
    }
    lookangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_EVADE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_EVADE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PKS.Vec2 moveDir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lookAngle;
        break;
      }

      // required float lookAngle = 2;
      case 2: {
        if (tag == 21) {
         parse_lookAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lookangle_)));
          set_has_lookangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_EVADE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_EVADE)
  return false;
#undef DO_
}

void CZ_EVADE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_EVADE)
  // required .PKS.Vec2 moveDir = 1;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->movedir(), output);
  }

  // required float lookAngle = 2;
  if (has_lookangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lookangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_EVADE)
}

::google::protobuf::uint8* CZ_EVADE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_EVADE)
  // required .PKS.Vec2 moveDir = 1;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->movedir(), target);
  }

  // required float lookAngle = 2;
  if (has_lookangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lookangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_EVADE)
  return target;
}

int CZ_EVADE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PKS.Vec2 moveDir = 1;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedir());
    }

    // required float lookAngle = 2;
    if (has_lookangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_EVADE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_EVADE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_EVADE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_EVADE::MergeFrom(const CZ_EVADE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movedir()) {
      mutable_movedir()->::PKS::Vec2::MergeFrom(from.movedir());
    }
    if (from.has_lookangle()) {
      set_lookangle(from.lookangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_EVADE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_EVADE::CopyFrom(const CZ_EVADE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_EVADE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_movedir()) {
    if (!this->movedir().IsInitialized()) return false;
  }
  return true;
}

void CZ_EVADE::Swap(CZ_EVADE* other) {
  if (other != this) {
    std::swap(movedir_, other->movedir_);
    std::swap(lookangle_, other->lookangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_EVADE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_EVADE_descriptor_;
  metadata.reflection = CZ_EVADE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CZ_ENTER_GAME::kIdFieldNumber;
const int CZ_ENTER_GAME::kPwFieldNumber;
#endif  // !_MSC_VER

CZ_ENTER_GAME::CZ_ENTER_GAME()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_ENTER_GAME)
}

void CZ_ENTER_GAME::InitAsDefaultInstance() {
}

CZ_ENTER_GAME::CZ_ENTER_GAME(const CZ_ENTER_GAME& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_ENTER_GAME)
}

void CZ_ENTER_GAME::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_ENTER_GAME::~CZ_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:PKS.CZ_ENTER_GAME)
  SharedDtor();
}

void CZ_ENTER_GAME::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pw_;
  }
  if (this != default_instance_) {
  }
}

void CZ_ENTER_GAME::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_ENTER_GAME::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_ENTER_GAME_descriptor_;
}

const CZ_ENTER_GAME& CZ_ENTER_GAME::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_ENTER_GAME* CZ_ENTER_GAME::default_instance_ = NULL;

CZ_ENTER_GAME* CZ_ENTER_GAME::New() const {
  return new CZ_ENTER_GAME;
}

void CZ_ENTER_GAME::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_pw()) {
      if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_ENTER_GAME::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_ENTER_GAME)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pw;
        break;
      }

      // required string pw = 2;
      case 2: {
        if (tag == 18) {
         parse_pw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pw().data(), this->pw().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pw");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_ENTER_GAME)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_ENTER_GAME)
  return false;
#undef DO_
}

void CZ_ENTER_GAME::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_ENTER_GAME)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string pw = 2;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pw().data(), this->pw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_ENTER_GAME)
}

::google::protobuf::uint8* CZ_ENTER_GAME::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_ENTER_GAME)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string pw = 2;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pw().data(), this->pw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_ENTER_GAME)
  return target;
}

int CZ_ENTER_GAME::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string pw = 2;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_ENTER_GAME::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_ENTER_GAME* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_ENTER_GAME*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_ENTER_GAME::MergeFrom(const CZ_ENTER_GAME& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_ENTER_GAME::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_ENTER_GAME::CopyFrom(const CZ_ENTER_GAME& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_ENTER_GAME::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CZ_ENTER_GAME::Swap(CZ_ENTER_GAME* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pw_, other->pw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_ENTER_GAME::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_ENTER_GAME_descriptor_;
  metadata.reflection = CZ_ENTER_GAME_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CZ_ATTACK::CZ_ATTACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_ATTACK)
}

void CZ_ATTACK::InitAsDefaultInstance() {
}

CZ_ATTACK::CZ_ATTACK(const CZ_ATTACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_ATTACK)
}

void CZ_ATTACK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_ATTACK::~CZ_ATTACK() {
  // @@protoc_insertion_point(destructor:PKS.CZ_ATTACK)
  SharedDtor();
}

void CZ_ATTACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CZ_ATTACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_ATTACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_ATTACK_descriptor_;
}

const CZ_ATTACK& CZ_ATTACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_ATTACK* CZ_ATTACK::default_instance_ = NULL;

CZ_ATTACK* CZ_ATTACK::New() const {
  return new CZ_ATTACK;
}

void CZ_ATTACK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_ATTACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_ATTACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_ATTACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_ATTACK)
  return false;
#undef DO_
}

void CZ_ATTACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_ATTACK)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_ATTACK)
}

::google::protobuf::uint8* CZ_ATTACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_ATTACK)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_ATTACK)
  return target;
}

int CZ_ATTACK::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_ATTACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_ATTACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_ATTACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_ATTACK::MergeFrom(const CZ_ATTACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_ATTACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_ATTACK::CopyFrom(const CZ_ATTACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_ATTACK::IsInitialized() const {

  return true;
}

void CZ_ATTACK::Swap(CZ_ATTACK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_ATTACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_ATTACK_descriptor_;
  metadata.reflection = CZ_ATTACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CZ_ATTACK_HIT::kHitObjIDFieldNumber;
#endif  // !_MSC_VER

CZ_ATTACK_HIT::CZ_ATTACK_HIT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_ATTACK_HIT)
}

void CZ_ATTACK_HIT::InitAsDefaultInstance() {
}

CZ_ATTACK_HIT::CZ_ATTACK_HIT(const CZ_ATTACK_HIT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_ATTACK_HIT)
}

void CZ_ATTACK_HIT::SharedCtor() {
  _cached_size_ = 0;
  hitobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_ATTACK_HIT::~CZ_ATTACK_HIT() {
  // @@protoc_insertion_point(destructor:PKS.CZ_ATTACK_HIT)
  SharedDtor();
}

void CZ_ATTACK_HIT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CZ_ATTACK_HIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_ATTACK_HIT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_ATTACK_HIT_descriptor_;
}

const CZ_ATTACK_HIT& CZ_ATTACK_HIT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_ATTACK_HIT* CZ_ATTACK_HIT::default_instance_ = NULL;

CZ_ATTACK_HIT* CZ_ATTACK_HIT::New() const {
  return new CZ_ATTACK_HIT;
}

void CZ_ATTACK_HIT::Clear() {
  hitobjid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_ATTACK_HIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_ATTACK_HIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hitObjID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitobjid_)));
          set_has_hitobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_ATTACK_HIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_ATTACK_HIT)
  return false;
#undef DO_
}

void CZ_ATTACK_HIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_ATTACK_HIT)
  // required int32 hitObjID = 1;
  if (has_hitobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hitobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_ATTACK_HIT)
}

::google::protobuf::uint8* CZ_ATTACK_HIT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_ATTACK_HIT)
  // required int32 hitObjID = 1;
  if (has_hitobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hitobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_ATTACK_HIT)
  return target;
}

int CZ_ATTACK_HIT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hitObjID = 1;
    if (has_hitobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_ATTACK_HIT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_ATTACK_HIT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_ATTACK_HIT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_ATTACK_HIT::MergeFrom(const CZ_ATTACK_HIT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hitobjid()) {
      set_hitobjid(from.hitobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_ATTACK_HIT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_ATTACK_HIT::CopyFrom(const CZ_ATTACK_HIT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_ATTACK_HIT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CZ_ATTACK_HIT::Swap(CZ_ATTACK_HIT* other) {
  if (other != this) {
    std::swap(hitobjid_, other->hitobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_ATTACK_HIT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_ATTACK_HIT_descriptor_;
  metadata.reflection = CZ_ATTACK_HIT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CZ_REVIVE::kUserIDFieldNumber;
#endif  // !_MSC_VER

CZ_REVIVE::CZ_REVIVE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_REVIVE)
}

void CZ_REVIVE::InitAsDefaultInstance() {
}

CZ_REVIVE::CZ_REVIVE(const CZ_REVIVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_REVIVE)
}

void CZ_REVIVE::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_REVIVE::~CZ_REVIVE() {
  // @@protoc_insertion_point(destructor:PKS.CZ_REVIVE)
  SharedDtor();
}

void CZ_REVIVE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CZ_REVIVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_REVIVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_REVIVE_descriptor_;
}

const CZ_REVIVE& CZ_REVIVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_REVIVE* CZ_REVIVE::default_instance_ = NULL;

CZ_REVIVE* CZ_REVIVE::New() const {
  return new CZ_REVIVE;
}

void CZ_REVIVE::Clear() {
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_REVIVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_REVIVE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_REVIVE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_REVIVE)
  return false;
#undef DO_
}

void CZ_REVIVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_REVIVE)
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_REVIVE)
}

::google::protobuf::uint8* CZ_REVIVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_REVIVE)
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_REVIVE)
  return target;
}

int CZ_REVIVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_REVIVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_REVIVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_REVIVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_REVIVE::MergeFrom(const CZ_REVIVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_REVIVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_REVIVE::CopyFrom(const CZ_REVIVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_REVIVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CZ_REVIVE::Swap(CZ_REVIVE* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_REVIVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_REVIVE_descriptor_;
  metadata.reflection = CZ_REVIVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CZ_USE_HP_POTION::CZ_USE_HP_POTION()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_USE_HP_POTION)
}

void CZ_USE_HP_POTION::InitAsDefaultInstance() {
}

CZ_USE_HP_POTION::CZ_USE_HP_POTION(const CZ_USE_HP_POTION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_USE_HP_POTION)
}

void CZ_USE_HP_POTION::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_USE_HP_POTION::~CZ_USE_HP_POTION() {
  // @@protoc_insertion_point(destructor:PKS.CZ_USE_HP_POTION)
  SharedDtor();
}

void CZ_USE_HP_POTION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CZ_USE_HP_POTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_USE_HP_POTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_USE_HP_POTION_descriptor_;
}

const CZ_USE_HP_POTION& CZ_USE_HP_POTION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_USE_HP_POTION* CZ_USE_HP_POTION::default_instance_ = NULL;

CZ_USE_HP_POTION* CZ_USE_HP_POTION::New() const {
  return new CZ_USE_HP_POTION;
}

void CZ_USE_HP_POTION::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_USE_HP_POTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_USE_HP_POTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_USE_HP_POTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_USE_HP_POTION)
  return false;
#undef DO_
}

void CZ_USE_HP_POTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_USE_HP_POTION)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_USE_HP_POTION)
}

::google::protobuf::uint8* CZ_USE_HP_POTION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_USE_HP_POTION)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_USE_HP_POTION)
  return target;
}

int CZ_USE_HP_POTION::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_USE_HP_POTION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_USE_HP_POTION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_USE_HP_POTION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_USE_HP_POTION::MergeFrom(const CZ_USE_HP_POTION& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_USE_HP_POTION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_USE_HP_POTION::CopyFrom(const CZ_USE_HP_POTION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_USE_HP_POTION::IsInitialized() const {

  return true;
}

void CZ_USE_HP_POTION::Swap(CZ_USE_HP_POTION* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_USE_HP_POTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_USE_HP_POTION_descriptor_;
  metadata.reflection = CZ_USE_HP_POTION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CZ_PING::CZ_PING()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PKS.CZ_PING)
}

void CZ_PING::InitAsDefaultInstance() {
}

CZ_PING::CZ_PING(const CZ_PING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PKS.CZ_PING)
}

void CZ_PING::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CZ_PING::~CZ_PING() {
  // @@protoc_insertion_point(destructor:PKS.CZ_PING)
  SharedDtor();
}

void CZ_PING::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CZ_PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CZ_PING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CZ_PING_descriptor_;
}

const CZ_PING& CZ_PING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  return *default_instance_;
}

CZ_PING* CZ_PING::default_instance_ = NULL;

CZ_PING* CZ_PING::New() const {
  return new CZ_PING;
}

void CZ_PING::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CZ_PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PKS.CZ_PING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PKS.CZ_PING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PKS.CZ_PING)
  return false;
#undef DO_
}

void CZ_PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PKS.CZ_PING)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PKS.CZ_PING)
}

::google::protobuf::uint8* CZ_PING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PKS.CZ_PING)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PKS.CZ_PING)
  return target;
}

int CZ_PING::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CZ_PING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CZ_PING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CZ_PING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CZ_PING::MergeFrom(const CZ_PING& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CZ_PING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CZ_PING::CopyFrom(const CZ_PING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CZ_PING::IsInitialized() const {

  return true;
}

void CZ_PING::Swap(CZ_PING* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CZ_PING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CZ_PING_descriptor_;
  metadata.reflection = CZ_PING_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

// @@protoc_insertion_point(global_scope)
