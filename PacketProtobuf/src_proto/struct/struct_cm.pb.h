// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct/struct_cm.proto

#ifndef PROTOBUF_struct_2fstruct_5fcm_2eproto__INCLUDED
#define PROTOBUF_struct_2fstruct_5fcm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PKS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_struct_2fstruct_5fcm_2eproto();
void protobuf_AssignDesc_struct_2fstruct_5fcm_2eproto();
void protobuf_ShutdownFile_struct_2fstruct_5fcm_2eproto();

class CM_JOIN_MEMBER;
class CM_LOGIN;
class CM_SET_FAMILY_NAME;

// ===================================================================

class CM_JOIN_MEMBER : public ::google::protobuf::Message {
 public:
  CM_JOIN_MEMBER();
  virtual ~CM_JOIN_MEMBER();

  CM_JOIN_MEMBER(const CM_JOIN_MEMBER& from);

  inline CM_JOIN_MEMBER& operator=(const CM_JOIN_MEMBER& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CM_JOIN_MEMBER& default_instance();

  void Swap(CM_JOIN_MEMBER* other);

  // implements Message ----------------------------------------------

  CM_JOIN_MEMBER* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CM_JOIN_MEMBER& from);
  void MergeFrom(const CM_JOIN_MEMBER& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string pw = 2;
  inline bool has_pw() const;
  inline void clear_pw();
  static const int kPwFieldNumber = 2;
  inline const ::std::string& pw() const;
  inline void set_pw(const ::std::string& value);
  inline void set_pw(const char* value);
  inline void set_pw(const char* value, size_t size);
  inline ::std::string* mutable_pw();
  inline ::std::string* release_pw();
  inline void set_allocated_pw(::std::string* pw);

  // @@protoc_insertion_point(class_scope:PKS.CM_JOIN_MEMBER)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pw();
  inline void clear_has_pw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* pw_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcm_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcm_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcm_2eproto();

  void InitAsDefaultInstance();
  static CM_JOIN_MEMBER* default_instance_;
};
// -------------------------------------------------------------------

class CM_LOGIN : public ::google::protobuf::Message {
 public:
  CM_LOGIN();
  virtual ~CM_LOGIN();

  CM_LOGIN(const CM_LOGIN& from);

  inline CM_LOGIN& operator=(const CM_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CM_LOGIN& default_instance();

  void Swap(CM_LOGIN* other);

  // implements Message ----------------------------------------------

  CM_LOGIN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CM_LOGIN& from);
  void MergeFrom(const CM_LOGIN& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string pw = 2;
  inline bool has_pw() const;
  inline void clear_pw();
  static const int kPwFieldNumber = 2;
  inline const ::std::string& pw() const;
  inline void set_pw(const ::std::string& value);
  inline void set_pw(const char* value);
  inline void set_pw(const char* value, size_t size);
  inline ::std::string* mutable_pw();
  inline ::std::string* release_pw();
  inline void set_allocated_pw(::std::string* pw);

  // @@protoc_insertion_point(class_scope:PKS.CM_LOGIN)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pw();
  inline void clear_has_pw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* pw_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcm_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcm_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcm_2eproto();

  void InitAsDefaultInstance();
  static CM_LOGIN* default_instance_;
};
// -------------------------------------------------------------------

class CM_SET_FAMILY_NAME : public ::google::protobuf::Message {
 public:
  CM_SET_FAMILY_NAME();
  virtual ~CM_SET_FAMILY_NAME();

  CM_SET_FAMILY_NAME(const CM_SET_FAMILY_NAME& from);

  inline CM_SET_FAMILY_NAME& operator=(const CM_SET_FAMILY_NAME& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CM_SET_FAMILY_NAME& default_instance();

  void Swap(CM_SET_FAMILY_NAME* other);

  // implements Message ----------------------------------------------

  CM_SET_FAMILY_NAME* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CM_SET_FAMILY_NAME& from);
  void MergeFrom(const CM_SET_FAMILY_NAME& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string familyName = 1;
  inline bool has_familyname() const;
  inline void clear_familyname();
  static const int kFamilyNameFieldNumber = 1;
  inline const ::std::string& familyname() const;
  inline void set_familyname(const ::std::string& value);
  inline void set_familyname(const char* value);
  inline void set_familyname(const char* value, size_t size);
  inline ::std::string* mutable_familyname();
  inline ::std::string* release_familyname();
  inline void set_allocated_familyname(::std::string* familyname);

  // @@protoc_insertion_point(class_scope:PKS.CM_SET_FAMILY_NAME)
 private:
  inline void set_has_familyname();
  inline void clear_has_familyname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* familyname_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcm_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcm_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcm_2eproto();

  void InitAsDefaultInstance();
  static CM_SET_FAMILY_NAME* default_instance_;
};
// ===================================================================


// ===================================================================

// CM_JOIN_MEMBER

// required string id = 1;
inline bool CM_JOIN_MEMBER::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CM_JOIN_MEMBER::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CM_JOIN_MEMBER::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CM_JOIN_MEMBER::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CM_JOIN_MEMBER::id() const {
  // @@protoc_insertion_point(field_get:PKS.CM_JOIN_MEMBER.id)
  return *id_;
}
inline void CM_JOIN_MEMBER::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CM_JOIN_MEMBER.id)
}
inline void CM_JOIN_MEMBER::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CM_JOIN_MEMBER.id)
}
inline void CM_JOIN_MEMBER::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CM_JOIN_MEMBER.id)
}
inline ::std::string* CM_JOIN_MEMBER::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CM_JOIN_MEMBER.id)
  return id_;
}
inline ::std::string* CM_JOIN_MEMBER::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CM_JOIN_MEMBER::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CM_JOIN_MEMBER.id)
}

// required string pw = 2;
inline bool CM_JOIN_MEMBER::has_pw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CM_JOIN_MEMBER::set_has_pw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CM_JOIN_MEMBER::clear_has_pw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CM_JOIN_MEMBER::clear_pw() {
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_->clear();
  }
  clear_has_pw();
}
inline const ::std::string& CM_JOIN_MEMBER::pw() const {
  // @@protoc_insertion_point(field_get:PKS.CM_JOIN_MEMBER.pw)
  return *pw_;
}
inline void CM_JOIN_MEMBER::set_pw(const ::std::string& value) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CM_JOIN_MEMBER.pw)
}
inline void CM_JOIN_MEMBER::set_pw(const char* value) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CM_JOIN_MEMBER.pw)
}
inline void CM_JOIN_MEMBER::set_pw(const char* value, size_t size) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CM_JOIN_MEMBER.pw)
}
inline ::std::string* CM_JOIN_MEMBER::mutable_pw() {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CM_JOIN_MEMBER.pw)
  return pw_;
}
inline ::std::string* CM_JOIN_MEMBER::release_pw() {
  clear_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pw_;
    pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CM_JOIN_MEMBER::set_allocated_pw(::std::string* pw) {
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pw_;
  }
  if (pw) {
    set_has_pw();
    pw_ = pw;
  } else {
    clear_has_pw();
    pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CM_JOIN_MEMBER.pw)
}

// -------------------------------------------------------------------

// CM_LOGIN

// required string id = 1;
inline bool CM_LOGIN::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CM_LOGIN::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CM_LOGIN::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CM_LOGIN::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CM_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:PKS.CM_LOGIN.id)
  return *id_;
}
inline void CM_LOGIN::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CM_LOGIN.id)
}
inline void CM_LOGIN::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CM_LOGIN.id)
}
inline void CM_LOGIN::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CM_LOGIN.id)
}
inline ::std::string* CM_LOGIN::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CM_LOGIN.id)
  return id_;
}
inline ::std::string* CM_LOGIN::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CM_LOGIN::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CM_LOGIN.id)
}

// required string pw = 2;
inline bool CM_LOGIN::has_pw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CM_LOGIN::set_has_pw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CM_LOGIN::clear_has_pw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CM_LOGIN::clear_pw() {
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_->clear();
  }
  clear_has_pw();
}
inline const ::std::string& CM_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:PKS.CM_LOGIN.pw)
  return *pw_;
}
inline void CM_LOGIN::set_pw(const ::std::string& value) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CM_LOGIN.pw)
}
inline void CM_LOGIN::set_pw(const char* value) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CM_LOGIN.pw)
}
inline void CM_LOGIN::set_pw(const char* value, size_t size) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CM_LOGIN.pw)
}
inline ::std::string* CM_LOGIN::mutable_pw() {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CM_LOGIN.pw)
  return pw_;
}
inline ::std::string* CM_LOGIN::release_pw() {
  clear_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pw_;
    pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CM_LOGIN::set_allocated_pw(::std::string* pw) {
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pw_;
  }
  if (pw) {
    set_has_pw();
    pw_ = pw;
  } else {
    clear_has_pw();
    pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CM_LOGIN.pw)
}

// -------------------------------------------------------------------

// CM_SET_FAMILY_NAME

// required string familyName = 1;
inline bool CM_SET_FAMILY_NAME::has_familyname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CM_SET_FAMILY_NAME::set_has_familyname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CM_SET_FAMILY_NAME::clear_has_familyname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CM_SET_FAMILY_NAME::clear_familyname() {
  if (familyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_->clear();
  }
  clear_has_familyname();
}
inline const ::std::string& CM_SET_FAMILY_NAME::familyname() const {
  // @@protoc_insertion_point(field_get:PKS.CM_SET_FAMILY_NAME.familyName)
  return *familyname_;
}
inline void CM_SET_FAMILY_NAME::set_familyname(const ::std::string& value) {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CM_SET_FAMILY_NAME.familyName)
}
inline void CM_SET_FAMILY_NAME::set_familyname(const char* value) {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CM_SET_FAMILY_NAME.familyName)
}
inline void CM_SET_FAMILY_NAME::set_familyname(const char* value, size_t size) {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  familyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CM_SET_FAMILY_NAME.familyName)
}
inline ::std::string* CM_SET_FAMILY_NAME::mutable_familyname() {
  set_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    familyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CM_SET_FAMILY_NAME.familyName)
  return familyname_;
}
inline ::std::string* CM_SET_FAMILY_NAME::release_familyname() {
  clear_has_familyname();
  if (familyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = familyname_;
    familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CM_SET_FAMILY_NAME::set_allocated_familyname(::std::string* familyname) {
  if (familyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete familyname_;
  }
  if (familyname) {
    set_has_familyname();
    familyname_ = familyname;
  } else {
    clear_has_familyname();
    familyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CM_SET_FAMILY_NAME.familyName)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_struct_2fstruct_5fcm_2eproto__INCLUDED
