// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct/struct_cz.proto

#ifndef PROTOBUF_struct_2fstruct_5fcz_2eproto__INCLUDED
#define PROTOBUF_struct_2fstruct_5fcz_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "etc/struct_etc.pb.h"
// @@protoc_insertion_point(includes)

namespace PKS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

class CZ_MOVE;
class CZ_STOP;
class CZ_EVADE;
class CZ_ENTER_GAME;
class CZ_ATTACK;
class CZ_ATTACK_HIT;
class CZ_REVIVE;
class CZ_USE_HP_POTION;
class CZ_PING;

// ===================================================================

class CZ_MOVE : public ::google::protobuf::Message {
 public:
  CZ_MOVE();
  virtual ~CZ_MOVE();

  CZ_MOVE(const CZ_MOVE& from);

  inline CZ_MOVE& operator=(const CZ_MOVE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_MOVE& default_instance();

  void Swap(CZ_MOVE* other);

  // implements Message ----------------------------------------------

  CZ_MOVE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_MOVE& from);
  void MergeFrom(const CZ_MOVE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PKS.Vec2 moveDir = 1;
  inline bool has_movedir() const;
  inline void clear_movedir();
  static const int kMoveDirFieldNumber = 1;
  inline const ::PKS::Vec2& movedir() const;
  inline ::PKS::Vec2* mutable_movedir();
  inline ::PKS::Vec2* release_movedir();
  inline void set_allocated_movedir(::PKS::Vec2* movedir);

  // required float lookAngle = 2;
  inline bool has_lookangle() const;
  inline void clear_lookangle();
  static const int kLookAngleFieldNumber = 2;
  inline float lookangle() const;
  inline void set_lookangle(float value);

  // @@protoc_insertion_point(class_scope:PKS.CZ_MOVE)
 private:
  inline void set_has_movedir();
  inline void clear_has_movedir();
  inline void set_has_lookangle();
  inline void clear_has_lookangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::Vec2* movedir_;
  float lookangle_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_MOVE* default_instance_;
};
// -------------------------------------------------------------------

class CZ_STOP : public ::google::protobuf::Message {
 public:
  CZ_STOP();
  virtual ~CZ_STOP();

  CZ_STOP(const CZ_STOP& from);

  inline CZ_STOP& operator=(const CZ_STOP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_STOP& default_instance();

  void Swap(CZ_STOP* other);

  // implements Message ----------------------------------------------

  CZ_STOP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_STOP& from);
  void MergeFrom(const CZ_STOP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PKS.CZ_STOP)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_STOP* default_instance_;
};
// -------------------------------------------------------------------

class CZ_EVADE : public ::google::protobuf::Message {
 public:
  CZ_EVADE();
  virtual ~CZ_EVADE();

  CZ_EVADE(const CZ_EVADE& from);

  inline CZ_EVADE& operator=(const CZ_EVADE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_EVADE& default_instance();

  void Swap(CZ_EVADE* other);

  // implements Message ----------------------------------------------

  CZ_EVADE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_EVADE& from);
  void MergeFrom(const CZ_EVADE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PKS.Vec2 moveDir = 1;
  inline bool has_movedir() const;
  inline void clear_movedir();
  static const int kMoveDirFieldNumber = 1;
  inline const ::PKS::Vec2& movedir() const;
  inline ::PKS::Vec2* mutable_movedir();
  inline ::PKS::Vec2* release_movedir();
  inline void set_allocated_movedir(::PKS::Vec2* movedir);

  // required float lookAngle = 2;
  inline bool has_lookangle() const;
  inline void clear_lookangle();
  static const int kLookAngleFieldNumber = 2;
  inline float lookangle() const;
  inline void set_lookangle(float value);

  // @@protoc_insertion_point(class_scope:PKS.CZ_EVADE)
 private:
  inline void set_has_movedir();
  inline void clear_has_movedir();
  inline void set_has_lookangle();
  inline void clear_has_lookangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PKS::Vec2* movedir_;
  float lookangle_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_EVADE* default_instance_;
};
// -------------------------------------------------------------------

class CZ_ENTER_GAME : public ::google::protobuf::Message {
 public:
  CZ_ENTER_GAME();
  virtual ~CZ_ENTER_GAME();

  CZ_ENTER_GAME(const CZ_ENTER_GAME& from);

  inline CZ_ENTER_GAME& operator=(const CZ_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_ENTER_GAME& default_instance();

  void Swap(CZ_ENTER_GAME* other);

  // implements Message ----------------------------------------------

  CZ_ENTER_GAME* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_ENTER_GAME& from);
  void MergeFrom(const CZ_ENTER_GAME& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string pw = 2;
  inline bool has_pw() const;
  inline void clear_pw();
  static const int kPwFieldNumber = 2;
  inline const ::std::string& pw() const;
  inline void set_pw(const ::std::string& value);
  inline void set_pw(const char* value);
  inline void set_pw(const char* value, size_t size);
  inline ::std::string* mutable_pw();
  inline ::std::string* release_pw();
  inline void set_allocated_pw(::std::string* pw);

  // @@protoc_insertion_point(class_scope:PKS.CZ_ENTER_GAME)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pw();
  inline void clear_has_pw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* pw_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_ENTER_GAME* default_instance_;
};
// -------------------------------------------------------------------

class CZ_ATTACK : public ::google::protobuf::Message {
 public:
  CZ_ATTACK();
  virtual ~CZ_ATTACK();

  CZ_ATTACK(const CZ_ATTACK& from);

  inline CZ_ATTACK& operator=(const CZ_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_ATTACK& default_instance();

  void Swap(CZ_ATTACK* other);

  // implements Message ----------------------------------------------

  CZ_ATTACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_ATTACK& from);
  void MergeFrom(const CZ_ATTACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PKS.CZ_ATTACK)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_ATTACK* default_instance_;
};
// -------------------------------------------------------------------

class CZ_ATTACK_HIT : public ::google::protobuf::Message {
 public:
  CZ_ATTACK_HIT();
  virtual ~CZ_ATTACK_HIT();

  CZ_ATTACK_HIT(const CZ_ATTACK_HIT& from);

  inline CZ_ATTACK_HIT& operator=(const CZ_ATTACK_HIT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_ATTACK_HIT& default_instance();

  void Swap(CZ_ATTACK_HIT* other);

  // implements Message ----------------------------------------------

  CZ_ATTACK_HIT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_ATTACK_HIT& from);
  void MergeFrom(const CZ_ATTACK_HIT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hitObjID = 1;
  inline bool has_hitobjid() const;
  inline void clear_hitobjid();
  static const int kHitObjIDFieldNumber = 1;
  inline ::google::protobuf::int32 hitobjid() const;
  inline void set_hitobjid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.CZ_ATTACK_HIT)
 private:
  inline void set_has_hitobjid();
  inline void clear_has_hitobjid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hitobjid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_ATTACK_HIT* default_instance_;
};
// -------------------------------------------------------------------

class CZ_REVIVE : public ::google::protobuf::Message {
 public:
  CZ_REVIVE();
  virtual ~CZ_REVIVE();

  CZ_REVIVE(const CZ_REVIVE& from);

  inline CZ_REVIVE& operator=(const CZ_REVIVE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_REVIVE& default_instance();

  void Swap(CZ_REVIVE* other);

  // implements Message ----------------------------------------------

  CZ_REVIVE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_REVIVE& from);
  void MergeFrom(const CZ_REVIVE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKS.CZ_REVIVE)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_REVIVE* default_instance_;
};
// -------------------------------------------------------------------

class CZ_USE_HP_POTION : public ::google::protobuf::Message {
 public:
  CZ_USE_HP_POTION();
  virtual ~CZ_USE_HP_POTION();

  CZ_USE_HP_POTION(const CZ_USE_HP_POTION& from);

  inline CZ_USE_HP_POTION& operator=(const CZ_USE_HP_POTION& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_USE_HP_POTION& default_instance();

  void Swap(CZ_USE_HP_POTION* other);

  // implements Message ----------------------------------------------

  CZ_USE_HP_POTION* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_USE_HP_POTION& from);
  void MergeFrom(const CZ_USE_HP_POTION& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PKS.CZ_USE_HP_POTION)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_USE_HP_POTION* default_instance_;
};
// -------------------------------------------------------------------

class CZ_PING : public ::google::protobuf::Message {
 public:
  CZ_PING();
  virtual ~CZ_PING();

  CZ_PING(const CZ_PING& from);

  inline CZ_PING& operator=(const CZ_PING& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CZ_PING& default_instance();

  void Swap(CZ_PING* other);

  // implements Message ----------------------------------------------

  CZ_PING* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CZ_PING& from);
  void MergeFrom(const CZ_PING& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PKS.CZ_PING)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_AssignDesc_struct_2fstruct_5fcz_2eproto();
  friend void protobuf_ShutdownFile_struct_2fstruct_5fcz_2eproto();

  void InitAsDefaultInstance();
  static CZ_PING* default_instance_;
};
// ===================================================================


// ===================================================================

// CZ_MOVE

// required .PKS.Vec2 moveDir = 1;
inline bool CZ_MOVE::has_movedir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CZ_MOVE::set_has_movedir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CZ_MOVE::clear_has_movedir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CZ_MOVE::clear_movedir() {
  if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
  clear_has_movedir();
}
inline const ::PKS::Vec2& CZ_MOVE::movedir() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_MOVE.moveDir)
  return movedir_ != NULL ? *movedir_ : *default_instance_->movedir_;
}
inline ::PKS::Vec2* CZ_MOVE::mutable_movedir() {
  set_has_movedir();
  if (movedir_ == NULL) movedir_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.CZ_MOVE.moveDir)
  return movedir_;
}
inline ::PKS::Vec2* CZ_MOVE::release_movedir() {
  clear_has_movedir();
  ::PKS::Vec2* temp = movedir_;
  movedir_ = NULL;
  return temp;
}
inline void CZ_MOVE::set_allocated_movedir(::PKS::Vec2* movedir) {
  delete movedir_;
  movedir_ = movedir;
  if (movedir) {
    set_has_movedir();
  } else {
    clear_has_movedir();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CZ_MOVE.moveDir)
}

// required float lookAngle = 2;
inline bool CZ_MOVE::has_lookangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CZ_MOVE::set_has_lookangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CZ_MOVE::clear_has_lookangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CZ_MOVE::clear_lookangle() {
  lookangle_ = 0;
  clear_has_lookangle();
}
inline float CZ_MOVE::lookangle() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_MOVE.lookAngle)
  return lookangle_;
}
inline void CZ_MOVE::set_lookangle(float value) {
  set_has_lookangle();
  lookangle_ = value;
  // @@protoc_insertion_point(field_set:PKS.CZ_MOVE.lookAngle)
}

// -------------------------------------------------------------------

// CZ_STOP

// -------------------------------------------------------------------

// CZ_EVADE

// required .PKS.Vec2 moveDir = 1;
inline bool CZ_EVADE::has_movedir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CZ_EVADE::set_has_movedir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CZ_EVADE::clear_has_movedir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CZ_EVADE::clear_movedir() {
  if (movedir_ != NULL) movedir_->::PKS::Vec2::Clear();
  clear_has_movedir();
}
inline const ::PKS::Vec2& CZ_EVADE::movedir() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_EVADE.moveDir)
  return movedir_ != NULL ? *movedir_ : *default_instance_->movedir_;
}
inline ::PKS::Vec2* CZ_EVADE::mutable_movedir() {
  set_has_movedir();
  if (movedir_ == NULL) movedir_ = new ::PKS::Vec2;
  // @@protoc_insertion_point(field_mutable:PKS.CZ_EVADE.moveDir)
  return movedir_;
}
inline ::PKS::Vec2* CZ_EVADE::release_movedir() {
  clear_has_movedir();
  ::PKS::Vec2* temp = movedir_;
  movedir_ = NULL;
  return temp;
}
inline void CZ_EVADE::set_allocated_movedir(::PKS::Vec2* movedir) {
  delete movedir_;
  movedir_ = movedir;
  if (movedir) {
    set_has_movedir();
  } else {
    clear_has_movedir();
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CZ_EVADE.moveDir)
}

// required float lookAngle = 2;
inline bool CZ_EVADE::has_lookangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CZ_EVADE::set_has_lookangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CZ_EVADE::clear_has_lookangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CZ_EVADE::clear_lookangle() {
  lookangle_ = 0;
  clear_has_lookangle();
}
inline float CZ_EVADE::lookangle() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_EVADE.lookAngle)
  return lookangle_;
}
inline void CZ_EVADE::set_lookangle(float value) {
  set_has_lookangle();
  lookangle_ = value;
  // @@protoc_insertion_point(field_set:PKS.CZ_EVADE.lookAngle)
}

// -------------------------------------------------------------------

// CZ_ENTER_GAME

// required string id = 1;
inline bool CZ_ENTER_GAME::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CZ_ENTER_GAME::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CZ_ENTER_GAME::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CZ_ENTER_GAME::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CZ_ENTER_GAME::id() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_ENTER_GAME.id)
  return *id_;
}
inline void CZ_ENTER_GAME::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CZ_ENTER_GAME.id)
}
inline void CZ_ENTER_GAME::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CZ_ENTER_GAME.id)
}
inline void CZ_ENTER_GAME::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CZ_ENTER_GAME.id)
}
inline ::std::string* CZ_ENTER_GAME::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CZ_ENTER_GAME.id)
  return id_;
}
inline ::std::string* CZ_ENTER_GAME::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CZ_ENTER_GAME::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CZ_ENTER_GAME.id)
}

// required string pw = 2;
inline bool CZ_ENTER_GAME::has_pw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CZ_ENTER_GAME::set_has_pw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CZ_ENTER_GAME::clear_has_pw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CZ_ENTER_GAME::clear_pw() {
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_->clear();
  }
  clear_has_pw();
}
inline const ::std::string& CZ_ENTER_GAME::pw() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_ENTER_GAME.pw)
  return *pw_;
}
inline void CZ_ENTER_GAME::set_pw(const ::std::string& value) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(value);
  // @@protoc_insertion_point(field_set:PKS.CZ_ENTER_GAME.pw)
}
inline void CZ_ENTER_GAME::set_pw(const char* value) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(value);
  // @@protoc_insertion_point(field_set_char:PKS.CZ_ENTER_GAME.pw)
}
inline void CZ_ENTER_GAME::set_pw(const char* value, size_t size) {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  pw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PKS.CZ_ENTER_GAME.pw)
}
inline ::std::string* CZ_ENTER_GAME::mutable_pw() {
  set_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PKS.CZ_ENTER_GAME.pw)
  return pw_;
}
inline ::std::string* CZ_ENTER_GAME::release_pw() {
  clear_has_pw();
  if (pw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pw_;
    pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CZ_ENTER_GAME::set_allocated_pw(::std::string* pw) {
  if (pw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pw_;
  }
  if (pw) {
    set_has_pw();
    pw_ = pw;
  } else {
    clear_has_pw();
    pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PKS.CZ_ENTER_GAME.pw)
}

// -------------------------------------------------------------------

// CZ_ATTACK

// -------------------------------------------------------------------

// CZ_ATTACK_HIT

// required int32 hitObjID = 1;
inline bool CZ_ATTACK_HIT::has_hitobjid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CZ_ATTACK_HIT::set_has_hitobjid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CZ_ATTACK_HIT::clear_has_hitobjid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CZ_ATTACK_HIT::clear_hitobjid() {
  hitobjid_ = 0;
  clear_has_hitobjid();
}
inline ::google::protobuf::int32 CZ_ATTACK_HIT::hitobjid() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_ATTACK_HIT.hitObjID)
  return hitobjid_;
}
inline void CZ_ATTACK_HIT::set_hitobjid(::google::protobuf::int32 value) {
  set_has_hitobjid();
  hitobjid_ = value;
  // @@protoc_insertion_point(field_set:PKS.CZ_ATTACK_HIT.hitObjID)
}

// -------------------------------------------------------------------

// CZ_REVIVE

// required int32 userID = 1;
inline bool CZ_REVIVE::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CZ_REVIVE::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CZ_REVIVE::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CZ_REVIVE::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 CZ_REVIVE::userid() const {
  // @@protoc_insertion_point(field_get:PKS.CZ_REVIVE.userID)
  return userid_;
}
inline void CZ_REVIVE::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:PKS.CZ_REVIVE.userID)
}

// -------------------------------------------------------------------

// CZ_USE_HP_POTION

// -------------------------------------------------------------------

// CZ_PING


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_struct_2fstruct_5fcz_2eproto__INCLUDED
